//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Solidity.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class SolidityParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, T__63=64, T__64=65, T__65=66, 
		T__66=67, T__67=68, T__68=69, T__69=70, T__70=71, T__71=72, T__72=73, 
		T__73=74, T__74=75, T__75=76, T__76=77, T__77=78, T__78=79, T__79=80, 
		T__80=81, T__81=82, T__82=83, T__83=84, T__84=85, T__85=86, T__86=87, 
		T__87=88, T__88=89, T__89=90, NatSpecSingleLine=91, NatSpecMultiLine=92, 
		Int=93, Uint=94, Byte=95, Fixed=96, Ufixed=97, VersionLiteral=98, BooleanLiteral=99, 
		DecimalNumber=100, HexNumber=101, NumberUnit=102, HexLiteral=103, ReservedKeyword=104, 
		AnonymousKeyword=105, BreakKeyword=106, ConstantKeyword=107, ContinueKeyword=108, 
		ExternalKeyword=109, IndexedKeyword=110, InternalKeyword=111, PayableKeyword=112, 
		PrivateKeyword=113, PublicKeyword=114, PureKeyword=115, TypeKeyword=116, 
		ViewKeyword=117, Identifier=118, StringLiteral=119, WS=120, COMMENT=121, 
		LINE_COMMENT=122;
	public const int
		RULE_sourceUnit = 0, RULE_pragmaDirective = 1, RULE_pragmaName = 2, RULE_pragmaValue = 3, 
		RULE_version = 4, RULE_versionOperator = 5, RULE_versionConstraint = 6, 
		RULE_importDeclaration = 7, RULE_importDirective = 8, RULE_natSpec = 9, 
		RULE_contractDefinition = 10, RULE_inheritanceSpecifier = 11, RULE_contractPart = 12, 
		RULE_stateVariableDeclaration = 13, RULE_usingForDeclaration = 14, RULE_structDefinition = 15, 
		RULE_constructorDefinition = 16, RULE_modifierDefinition = 17, RULE_modifierInvocation = 18, 
		RULE_functionDefinition = 19, RULE_returnParameters = 20, RULE_modifierList = 21, 
		RULE_eventDefinition = 22, RULE_enumValue = 23, RULE_enumDefinition = 24, 
		RULE_parameterList = 25, RULE_parameter = 26, RULE_eventParameterList = 27, 
		RULE_eventParameter = 28, RULE_functionTypeParameterList = 29, RULE_functionTypeParameter = 30, 
		RULE_variableDeclaration = 31, RULE_typeName = 32, RULE_userDefinedTypeName = 33, 
		RULE_mapping = 34, RULE_functionTypeName = 35, RULE_storageLocation = 36, 
		RULE_stateMutability = 37, RULE_block = 38, RULE_statement = 39, RULE_expressionStatement = 40, 
		RULE_ifStatement = 41, RULE_whileStatement = 42, RULE_simpleStatement = 43, 
		RULE_forStatement = 44, RULE_inlineAssemblyStatement = 45, RULE_doWhileStatement = 46, 
		RULE_continueStatement = 47, RULE_breakStatement = 48, RULE_returnStatement = 49, 
		RULE_throwStatement = 50, RULE_emitStatement = 51, RULE_variableDeclarationStatement = 52, 
		RULE_variableDeclarationList = 53, RULE_identifierList = 54, RULE_elementaryTypeName = 55, 
		RULE_expression = 56, RULE_primaryExpression = 57, RULE_expressionList = 58, 
		RULE_nameValueList = 59, RULE_nameValue = 60, RULE_functionCallArguments = 61, 
		RULE_functionCall = 62, RULE_assemblyBlock = 63, RULE_assemblyItem = 64, 
		RULE_assemblyExpression = 65, RULE_assemblyCall = 66, RULE_assemblyLocalDefinition = 67, 
		RULE_assemblyAssignment = 68, RULE_assemblyIdentifierOrList = 69, RULE_assemblyIdentifierList = 70, 
		RULE_assemblyStackAssignment = 71, RULE_labelDefinition = 72, RULE_assemblySwitch = 73, 
		RULE_assemblyCase = 74, RULE_assemblyFunctionDefinition = 75, RULE_assemblyFunctionReturns = 76, 
		RULE_assemblyFor = 77, RULE_assemblyIf = 78, RULE_assemblyLiteral = 79, 
		RULE_subAssembly = 80, RULE_tupleExpression = 81, RULE_elementaryTypeNameExpression = 82, 
		RULE_numberLiteral = 83, RULE_identifier = 84;
	public static readonly string[] ruleNames = {
		"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
		"versionOperator", "versionConstraint", "importDeclaration", "importDirective", 
		"natSpec", "contractDefinition", "inheritanceSpecifier", "contractPart", 
		"stateVariableDeclaration", "usingForDeclaration", "structDefinition", 
		"constructorDefinition", "modifierDefinition", "modifierInvocation", "functionDefinition", 
		"returnParameters", "modifierList", "eventDefinition", "enumValue", "enumDefinition", 
		"parameterList", "parameter", "eventParameterList", "eventParameter", 
		"functionTypeParameterList", "functionTypeParameter", "variableDeclaration", 
		"typeName", "userDefinedTypeName", "mapping", "functionTypeName", "storageLocation", 
		"stateMutability", "block", "statement", "expressionStatement", "ifStatement", 
		"whileStatement", "simpleStatement", "forStatement", "inlineAssemblyStatement", 
		"doWhileStatement", "continueStatement", "breakStatement", "returnStatement", 
		"throwStatement", "emitStatement", "variableDeclarationStatement", "variableDeclarationList", 
		"identifierList", "elementaryTypeName", "expression", "primaryExpression", 
		"expressionList", "nameValueList", "nameValue", "functionCallArguments", 
		"functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
		"assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", "assemblyIdentifierOrList", 
		"assemblyIdentifierList", "assemblyStackAssignment", "labelDefinition", 
		"assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", "assemblyFunctionReturns", 
		"assemblyFor", "assemblyIf", "assemblyLiteral", "subAssembly", "tupleExpression", 
		"elementaryTypeNameExpression", "numberLiteral", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'pragma'", "';'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", "'='", 
		"'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'contract'", 
		"'interface'", "'library'", "'is'", "'('", "')'", "'using'", "'for'", 
		"'struct'", "'constructor'", "'modifier'", "'function'", "'returns'", 
		"'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", 
		"'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'while'", "'assembly'", 
		"'do'", "'return'", "'throw'", "'emit'", "'var'", "'bool'", "'string'", 
		"'byte'", "'++'", "'--'", "'new'", "'+'", "'-'", "'after'", "'delete'", 
		"'!'", "'**'", "'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", 
		"'&&'", "'||'", "'?'", "':'", "'|='", "'^='", "'&='", "'<<='", "'>>='", 
		"'+='", "'-='", "'*='", "'/='", "'%='", "'let'", "':='", "'=:'", "'switch'", 
		"'case'", "'default'", "'->'", null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "'anonymous'", "'break'", "'constant'", 
		"'continue'", "'external'", "'indexed'", "'internal'", "'payable'", "'private'", 
		"'public'", "'pure'", "'type'", "'view'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NatSpecSingleLine", "NatSpecMultiLine", 
		"Int", "Uint", "Byte", "Fixed", "Ufixed", "VersionLiteral", "BooleanLiteral", 
		"DecimalNumber", "HexNumber", "NumberUnit", "HexLiteral", "ReservedKeyword", 
		"AnonymousKeyword", "BreakKeyword", "ConstantKeyword", "ContinueKeyword", 
		"ExternalKeyword", "IndexedKeyword", "InternalKeyword", "PayableKeyword", 
		"PrivateKeyword", "PublicKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
		"Identifier", "StringLiteral", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Solidity.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static SolidityParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SolidityParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SolidityParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class SourceUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SolidityParser.Eof, 0); }
		public PragmaDirectiveContext[] pragmaDirective() {
			return GetRuleContexts<PragmaDirectiveContext>();
		}
		public PragmaDirectiveContext pragmaDirective(int i) {
			return GetRuleContext<PragmaDirectiveContext>(i);
		}
		public ImportDirectiveContext[] importDirective() {
			return GetRuleContexts<ImportDirectiveContext>();
		}
		public ImportDirectiveContext importDirective(int i) {
			return GetRuleContext<ImportDirectiveContext>(i);
		}
		public ContractDefinitionContext[] contractDefinition() {
			return GetRuleContexts<ContractDefinitionContext>();
		}
		public ContractDefinitionContext contractDefinition(int i) {
			return GetRuleContext<ContractDefinitionContext>(i);
		}
		public SourceUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSourceUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSourceUnit(this);
		}
	}

	[RuleVersion(0)]
	public SourceUnitContext sourceUnit() {
		SourceUnitContext _localctx = new SourceUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_sourceUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__10) | (1L << T__16) | (1L << T__17) | (1L << T__18))) != 0) || _la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 173;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__0:
					{
					State = 170; pragmaDirective();
					}
					break;
				case T__10:
					{
					State = 171; importDirective();
					}
					break;
				case T__16:
				case T__17:
				case T__18:
				case NatSpecSingleLine:
				case NatSpecMultiLine:
					{
					State = 172; contractDefinition();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaDirectiveContext : ParserRuleContext {
		public PragmaNameContext pragmaName() {
			return GetRuleContext<PragmaNameContext>(0);
		}
		public PragmaValueContext pragmaValue() {
			return GetRuleContext<PragmaValueContext>(0);
		}
		public PragmaDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaDirective(this);
		}
	}

	[RuleVersion(0)]
	public PragmaDirectiveContext pragmaDirective() {
		PragmaDirectiveContext _localctx = new PragmaDirectiveContext(Context, State);
		EnterRule(_localctx, 2, RULE_pragmaDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(T__0);
			State = 181; pragmaName();
			State = 182; pragmaValue();
			State = 183; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaNameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PragmaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaName(this);
		}
	}

	[RuleVersion(0)]
	public PragmaNameContext pragmaName() {
		PragmaNameContext _localctx = new PragmaNameContext(Context, State);
		EnterRule(_localctx, 4, RULE_pragmaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PragmaValueContext : ParserRuleContext {
		public VersionContext version() {
			return GetRuleContext<VersionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PragmaValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pragmaValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPragmaValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPragmaValue(this);
		}
	}

	[RuleVersion(0)]
	public PragmaValueContext pragmaValue() {
		PragmaValueContext _localctx = new PragmaValueContext(Context, State);
		EnterRule(_localctx, 6, RULE_pragmaValue);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 187; version();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionContext : ParserRuleContext {
		public VersionConstraintContext[] versionConstraint() {
			return GetRuleContexts<VersionConstraintContext>();
		}
		public VersionConstraintContext versionConstraint(int i) {
			return GetRuleContext<VersionConstraintContext>(i);
		}
		public VersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_version; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersion(this);
		}
	}

	[RuleVersion(0)]
	public VersionContext version() {
		VersionContext _localctx = new VersionContext(Context, State);
		EnterRule(_localctx, 8, RULE_version);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191; versionConstraint();
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0) || _la==VersionLiteral) {
				{
				State = 192; versionConstraint();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionOperatorContext : ParserRuleContext {
		public VersionOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionOperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionOperator(this);
		}
	}

	[RuleVersion(0)]
	public VersionOperatorContext versionOperator() {
		VersionOperatorContext _localctx = new VersionOperatorContext(Context, State);
		EnterRule(_localctx, 10, RULE_versionOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionConstraintContext : ParserRuleContext {
		public ITerminalNode VersionLiteral() { return GetToken(SolidityParser.VersionLiteral, 0); }
		public VersionOperatorContext versionOperator() {
			return GetRuleContext<VersionOperatorContext>(0);
		}
		public VersionConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionConstraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVersionConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVersionConstraint(this);
		}
	}

	[RuleVersion(0)]
	public VersionConstraintContext versionConstraint() {
		VersionConstraintContext _localctx = new VersionConstraintContext(Context, State);
		EnterRule(_localctx, 12, RULE_versionConstraint);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8))) != 0)) {
				{
				State = 197; versionOperator();
				}
			}

			State = 200; Match(VersionLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; identifier();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__9) {
				{
				State = 203; Match(T__9);
				State = 204; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDirectiveContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public ImportDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDirective; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterImportDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitImportDirective(this);
		}
	}

	[RuleVersion(0)]
	public ImportDirectiveContext importDirective() {
		ImportDirectiveContext _localctx = new ImportDirectiveContext(Context, State);
		EnterRule(_localctx, 16, RULE_importDirective);
		int _la;
		try {
			State = 241;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 207; Match(T__10);
				State = 208; Match(StringLiteral);
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 209; Match(T__9);
					State = 210; identifier();
					}
				}

				State = 213; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 214; Match(T__10);
				State = 217;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__11:
					{
					State = 215; Match(T__11);
					}
					break;
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 216; identifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 221;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__9) {
					{
					State = 219; Match(T__9);
					State = 220; identifier();
					}
				}

				State = 223; Match(T__12);
				State = 224; Match(StringLiteral);
				State = 225; Match(T__1);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 226; Match(T__10);
				State = 227; Match(T__13);
				State = 228; importDeclaration();
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 229; Match(T__14);
					State = 230; importDeclaration();
					}
					}
					State = 235;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 236; Match(T__15);
				State = 237; Match(T__12);
				State = 238; Match(StringLiteral);
				State = 239; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NatSpecContext : ParserRuleContext {
		public ITerminalNode NatSpecSingleLine() { return GetToken(SolidityParser.NatSpecSingleLine, 0); }
		public ITerminalNode NatSpecMultiLine() { return GetToken(SolidityParser.NatSpecMultiLine, 0); }
		public NatSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_natSpec; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNatSpec(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNatSpec(this);
		}
	}

	[RuleVersion(0)]
	public NatSpecContext natSpec() {
		NatSpecContext _localctx = new NatSpecContext(Context, State);
		EnterRule(_localctx, 18, RULE_natSpec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			_la = TokenStream.LA(1);
			if ( !(_la==NatSpecSingleLine || _la==NatSpecMultiLine) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		public InheritanceSpecifierContext[] inheritanceSpecifier() {
			return GetRuleContexts<InheritanceSpecifierContext>();
		}
		public InheritanceSpecifierContext inheritanceSpecifier(int i) {
			return GetRuleContext<InheritanceSpecifierContext>(i);
		}
		public ContractPartContext[] contractPart() {
			return GetRuleContexts<ContractPartContext>();
		}
		public ContractPartContext contractPart(int i) {
			return GetRuleContext<ContractPartContext>(i);
		}
		public ContractDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ContractDefinitionContext contractDefinition() {
		ContractDefinitionContext _localctx = new ContractDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_contractDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 245; natSpec();
				}
			}

			State = 248;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__16) | (1L << T__17) | (1L << T__18))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 249; identifier();
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 250; Match(T__19);
				State = 251; inheritanceSpecifier();
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 252; Match(T__14);
					State = 253; inheritanceSpecifier();
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 261; Match(T__13);
			State = 265;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__22) | (1L << T__24) | (1L << T__25) | (1L << T__26) | (1L << T__27) | (1L << T__29) | (1L << T__30) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (NatSpecSingleLine - 91)) | (1L << (NatSpecMultiLine - 91)) | (1L << (Int - 91)) | (1L << (Uint - 91)) | (1L << (Byte - 91)) | (1L << (Fixed - 91)) | (1L << (Ufixed - 91)) | (1L << (Identifier - 91)))) != 0)) {
				{
				{
				State = 262; contractPart();
				}
				}
				State = 267;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 268; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InheritanceSpecifierContext : ParserRuleContext {
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public InheritanceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inheritanceSpecifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInheritanceSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInheritanceSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public InheritanceSpecifierContext inheritanceSpecifier() {
		InheritanceSpecifierContext _localctx = new InheritanceSpecifierContext(Context, State);
		EnterRule(_localctx, 22, RULE_inheritanceSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 270; userDefinedTypeName();
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 271; Match(T__20);
				State = 273;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
					{
					State = 272; expressionList();
					}
				}

				State = 275; Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContractPartContext : ParserRuleContext {
		public StateVariableDeclarationContext stateVariableDeclaration() {
			return GetRuleContext<StateVariableDeclarationContext>(0);
		}
		public UsingForDeclarationContext usingForDeclaration() {
			return GetRuleContext<UsingForDeclarationContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public ConstructorDefinitionContext constructorDefinition() {
			return GetRuleContext<ConstructorDefinitionContext>(0);
		}
		public ModifierDefinitionContext modifierDefinition() {
			return GetRuleContext<ModifierDefinitionContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public EventDefinitionContext eventDefinition() {
			return GetRuleContext<EventDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public ContractPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contractPart; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContractPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContractPart(this);
		}
	}

	[RuleVersion(0)]
	public ContractPartContext contractPart() {
		ContractPartContext _localctx = new ContractPartContext(Context, State);
		EnterRule(_localctx, 24, RULE_contractPart);
		try {
			State = 286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; stateVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; usingForDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 280; structDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 281; constructorDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 282; modifierDefinition();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 283; functionDefinition();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 284; eventDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 285; enumDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateVariableDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ITerminalNode[] ConstantKeyword() { return GetTokens(SolidityParser.ConstantKeyword); }
		public ITerminalNode ConstantKeyword(int i) {
			return GetToken(SolidityParser.ConstantKeyword, i);
		}
		public StateVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StateVariableDeclarationContext stateVariableDeclaration() {
		StateVariableDeclarationContext _localctx = new StateVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 26, RULE_stateVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; typeName(0);
			State = 292;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (ConstantKeyword - 107)) | (1L << (InternalKeyword - 107)) | (1L << (PrivateKeyword - 107)) | (1L << (PublicKeyword - 107)))) != 0)) {
				{
				{
				State = 289;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (ConstantKeyword - 107)) | (1L << (InternalKeyword - 107)) | (1L << (PrivateKeyword - 107)) | (1L << (PublicKeyword - 107)))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				}
				State = 294;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 295; identifier();
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 296; Match(T__8);
				State = 297; expression(0);
				}
			}

			State = 300; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingForDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public UsingForDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingForDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUsingForDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUsingForDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UsingForDeclarationContext usingForDeclaration() {
		UsingForDeclarationContext _localctx = new UsingForDeclarationContext(Context, State);
		EnterRule(_localctx, 28, RULE_usingForDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302; Match(T__22);
			State = 303; identifier();
			State = 304; Match(T__23);
			State = 307;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__11:
				{
				State = 305; Match(T__11);
				}
				break;
			case T__12:
			case T__27:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case Identifier:
				{
				State = 306; typeName(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 309; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 30, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__24);
			State = 312; identifier();
			State = 313; Match(T__13);
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 314; variableDeclaration();
				State = 315; Match(T__1);
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					{
					State = 316; variableDeclaration();
					State = 317; Match(T__1);
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 326; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDefinitionContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ConstructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterConstructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitConstructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDefinitionContext constructorDefinition() {
		ConstructorDefinitionContext _localctx = new ConstructorDefinitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_constructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328; Match(T__25);
			State = 329; parameterList();
			State = 330; modifierList();
			State = 331; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ModifierDefinitionContext modifierDefinition() {
		ModifierDefinitionContext _localctx = new ModifierDefinitionContext(Context, State);
		EnterRule(_localctx, 34, RULE_modifierDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333; Match(T__26);
			State = 334; identifier();
			State = 336;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 335; parameterList();
				}
			}

			State = 338; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierInvocationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ModifierInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierInvocation(this);
		}
	}

	[RuleVersion(0)]
	public ModifierInvocationContext modifierInvocation() {
		ModifierInvocationContext _localctx = new ModifierInvocationContext(Context, State);
		EnterRule(_localctx, 36, RULE_modifierInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 340; identifier();
			State = 346;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__20) {
				{
				State = 341; Match(T__20);
				State = 343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
					{
					State = 342; expressionList();
					}
				}

				State = 345; Match(T__21);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ModifierListContext modifierList() {
			return GetRuleContext<ModifierListContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ReturnParametersContext returnParameters() {
			return GetRuleContext<ReturnParametersContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext functionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 38, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 349;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 348; natSpec();
				}
			}

			State = 351; Match(T__27);
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 352; identifier();
				}
			}

			State = 355; parameterList();
			State = 356; modifierList();
			State = 358;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__28) {
				{
				State = 357; returnParameters();
				}
			}

			State = 362;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 360; Match(T__1);
				}
				break;
			case T__13:
				{
				State = 361; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnParametersContext : ParserRuleContext {
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public ReturnParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnParameters(this);
		}
	}

	[RuleVersion(0)]
	public ReturnParametersContext returnParameters() {
		ReturnParametersContext _localctx = new ReturnParametersContext(Context, State);
		EnterRule(_localctx, 40, RULE_returnParameters);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 364; Match(T__28);
			State = 365; parameterList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierListContext : ParserRuleContext {
		public ModifierInvocationContext[] modifierInvocation() {
			return GetRuleContexts<ModifierInvocationContext>();
		}
		public ModifierInvocationContext modifierInvocation(int i) {
			return GetRuleContext<ModifierInvocationContext>(i);
		}
		public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		public ITerminalNode[] PublicKeyword() { return GetTokens(SolidityParser.PublicKeyword); }
		public ITerminalNode PublicKeyword(int i) {
			return GetToken(SolidityParser.PublicKeyword, i);
		}
		public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		public ITerminalNode[] PrivateKeyword() { return GetTokens(SolidityParser.PrivateKeyword); }
		public ITerminalNode PrivateKeyword(int i) {
			return GetToken(SolidityParser.PrivateKeyword, i);
		}
		public ModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterModifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitModifierList(this);
		}
	}

	[RuleVersion(0)]
	public ModifierListContext modifierList() {
		ModifierListContext _localctx = new ModifierListContext(Context, State);
		EnterRule(_localctx, 42, RULE_modifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 375;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12 || _la==T__39 || ((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (ConstantKeyword - 107)) | (1L << (ExternalKeyword - 107)) | (1L << (InternalKeyword - 107)) | (1L << (PayableKeyword - 107)) | (1L << (PrivateKeyword - 107)) | (1L << (PublicKeyword - 107)) | (1L << (PureKeyword - 107)) | (1L << (ViewKeyword - 107)) | (1L << (Identifier - 107)))) != 0)) {
				{
				State = 373;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__12:
				case T__39:
				case Identifier:
					{
					State = 367; modifierInvocation();
					}
					break;
				case ConstantKeyword:
				case PayableKeyword:
				case PureKeyword:
				case ViewKeyword:
					{
					State = 368; stateMutability();
					}
					break;
				case ExternalKeyword:
					{
					State = 369; Match(ExternalKeyword);
					}
					break;
				case PublicKeyword:
					{
					State = 370; Match(PublicKeyword);
					}
					break;
				case InternalKeyword:
					{
					State = 371; Match(InternalKeyword);
					}
					break;
				case PrivateKeyword:
					{
					State = 372; Match(PrivateKeyword);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 377;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterListContext eventParameterList() {
			return GetRuleContext<EventParameterListContext>(0);
		}
		public NatSpecContext natSpec() {
			return GetRuleContext<NatSpecContext>(0);
		}
		public ITerminalNode AnonymousKeyword() { return GetToken(SolidityParser.AnonymousKeyword, 0); }
		public EventDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EventDefinitionContext eventDefinition() {
		EventDefinitionContext _localctx = new EventDefinitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_eventDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NatSpecSingleLine || _la==NatSpecMultiLine) {
				{
				State = 378; natSpec();
				}
			}

			State = 381; Match(T__29);
			State = 382; identifier();
			State = 383; eventParameterList();
			State = 385;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AnonymousKeyword) {
				{
				State = 384; Match(AnonymousKeyword);
				}
			}

			State = 387; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumValue(this);
		}
	}

	[RuleVersion(0)]
	public EnumValueContext enumValue() {
		EnumValueContext _localctx = new EnumValueContext(Context, State);
		EnterRule(_localctx, 46, RULE_enumValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 389; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumValueContext[] enumValue() {
			return GetRuleContexts<EnumValueContext>();
		}
		public EnumValueContext enumValue(int i) {
			return GetRuleContext<EnumValueContext>(i);
		}
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext enumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 391; Match(T__30);
			State = 392; identifier();
			State = 393; Match(T__13);
			State = 395;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 394; enumValue();
				}
			}

			State = 401;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 397; Match(T__14);
				State = 398; enumValue();
				}
				}
				State = 403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 404; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : ParserRuleContext {
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(Context, State);
		EnterRule(_localctx, 50, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406; Match(T__20);
			State = 415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 407; parameter();
				State = 412;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 408; Match(T__14);
					State = 409; parameter();
					}
					}
					State = 414;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 417; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 52, RULE_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 419; typeName(0);
			State = 421;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				{
				State = 420; storageLocation();
				}
				break;
			}
			State = 424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 423; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterListContext : ParserRuleContext {
		public EventParameterContext[] eventParameter() {
			return GetRuleContexts<EventParameterContext>();
		}
		public EventParameterContext eventParameter(int i) {
			return GetRuleContext<EventParameterContext>(i);
		}
		public EventParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameterList(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterListContext eventParameterList() {
		EventParameterListContext _localctx = new EventParameterListContext(Context, State);
		EnterRule(_localctx, 54, RULE_eventParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 426; Match(T__20);
			State = 435;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 427; eventParameter();
				State = 432;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 428; Match(T__14);
					State = 429; eventParameter();
					}
					}
					State = 434;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 437; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ITerminalNode IndexedKeyword() { return GetToken(SolidityParser.IndexedKeyword, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EventParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEventParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEventParameter(this);
		}
	}

	[RuleVersion(0)]
	public EventParameterContext eventParameter() {
		EventParameterContext _localctx = new EventParameterContext(Context, State);
		EnterRule(_localctx, 56, RULE_eventParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 439; typeName(0);
			State = 441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IndexedKeyword) {
				{
				State = 440; Match(IndexedKeyword);
				}
			}

			State = 444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 443; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterListContext : ParserRuleContext {
		public FunctionTypeParameterContext[] functionTypeParameter() {
			return GetRuleContexts<FunctionTypeParameterContext>();
		}
		public FunctionTypeParameterContext functionTypeParameter(int i) {
			return GetRuleContext<FunctionTypeParameterContext>(i);
		}
		public FunctionTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterListContext functionTypeParameterList() {
		FunctionTypeParameterListContext _localctx = new FunctionTypeParameterListContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 446; Match(T__20);
			State = 455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 447; functionTypeParameter();
				State = 452;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 448; Match(T__14);
					State = 449; functionTypeParameter();
					}
					}
					State = 454;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 457; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeParameterContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public FunctionTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeParameterContext functionTypeParameter() {
		FunctionTypeParameterContext _localctx = new FunctionTypeParameterContext(Context, State);
		EnterRule(_localctx, 60, RULE_functionTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 459; typeName(0);
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) {
				{
				State = 460; storageLocation();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StorageLocationContext storageLocation() {
			return GetRuleContext<StorageLocationContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_variableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 463; typeName(0);
			State = 465;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
			case 1:
				{
				State = 464; storageLocation();
				}
				break;
			}
			State = 467; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : ParserRuleContext {
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public UserDefinedTypeNameContext userDefinedTypeName() {
			return GetRuleContext<UserDefinedTypeNameContext>(0);
		}
		public MappingContext mapping() {
			return GetRuleContext<MappingContext>(0);
		}
		public FunctionTypeNameContext functionTypeName() {
			return GetRuleContext<FunctionTypeNameContext>(0);
		}
		public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		return typeName(0);
	}

	private TypeNameContext typeName(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeNameContext _localctx = new TypeNameContext(Context, _parentState);
		TypeNameContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_typeName, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 476;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 470; elementaryTypeName();
				}
				break;
			case 2:
				{
				State = 471; userDefinedTypeName();
				}
				break;
			case 3:
				{
				State = 472; mapping();
				}
				break;
			case 4:
				{
				State = 473; functionTypeName();
				}
				break;
			case 5:
				{
				State = 474; Match(T__33);
				State = 475; Match(PayableKeyword);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 486;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeNameContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeName);
					State = 478;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 479; Match(T__31);
					State = 481;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
						{
						State = 480; expression(0);
						}
					}

					State = 483; Match(T__32);
					}
					} 
				}
				State = 488;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,50,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class UserDefinedTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public UserDefinedTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterUserDefinedTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitUserDefinedTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedTypeNameContext userDefinedTypeName() {
		UserDefinedTypeNameContext _localctx = new UserDefinedTypeNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_userDefinedTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; identifier();
			State = 494;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 490; Match(T__34);
					State = 491; identifier();
					}
					} 
				}
				State = 496;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MappingContext : ParserRuleContext {
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public MappingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mapping; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterMapping(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitMapping(this);
		}
	}

	[RuleVersion(0)]
	public MappingContext mapping() {
		MappingContext _localctx = new MappingContext(Context, State);
		EnterRule(_localctx, 68, RULE_mapping);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 497; Match(T__35);
			State = 498; Match(T__20);
			State = 499; elementaryTypeName();
			State = 500; Match(T__36);
			State = 501; typeName(0);
			State = 502; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTypeNameContext : ParserRuleContext {
		public FunctionTypeParameterListContext[] functionTypeParameterList() {
			return GetRuleContexts<FunctionTypeParameterListContext>();
		}
		public FunctionTypeParameterListContext functionTypeParameterList(int i) {
			return GetRuleContext<FunctionTypeParameterListContext>(i);
		}
		public ITerminalNode[] InternalKeyword() { return GetTokens(SolidityParser.InternalKeyword); }
		public ITerminalNode InternalKeyword(int i) {
			return GetToken(SolidityParser.InternalKeyword, i);
		}
		public ITerminalNode[] ExternalKeyword() { return GetTokens(SolidityParser.ExternalKeyword); }
		public ITerminalNode ExternalKeyword(int i) {
			return GetToken(SolidityParser.ExternalKeyword, i);
		}
		public StateMutabilityContext[] stateMutability() {
			return GetRuleContexts<StateMutabilityContext>();
		}
		public StateMutabilityContext stateMutability(int i) {
			return GetRuleContext<StateMutabilityContext>(i);
		}
		public FunctionTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionTypeName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTypeNameContext functionTypeName() {
		FunctionTypeNameContext _localctx = new FunctionTypeNameContext(Context, State);
		EnterRule(_localctx, 70, RULE_functionTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 504; Match(T__27);
			State = 505; functionTypeParameterList();
			State = 511;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 509;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case InternalKeyword:
						{
						State = 506; Match(InternalKeyword);
						}
						break;
					case ExternalKeyword:
						{
						State = 507; Match(ExternalKeyword);
						}
						break;
					case ConstantKeyword:
					case PayableKeyword:
					case PureKeyword:
					case ViewKeyword:
						{
						State = 508; stateMutability();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 513;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 516;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 514; Match(T__28);
				State = 515; functionTypeParameterList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageLocationContext : ParserRuleContext {
		public StorageLocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageLocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStorageLocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStorageLocation(this);
		}
	}

	[RuleVersion(0)]
	public StorageLocationContext storageLocation() {
		StorageLocationContext _localctx = new StorageLocationContext(Context, State);
		EnterRule(_localctx, 72, RULE_storageLocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 518;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__37) | (1L << T__38) | (1L << T__39))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StateMutabilityContext : ParserRuleContext {
		public ITerminalNode PureKeyword() { return GetToken(SolidityParser.PureKeyword, 0); }
		public ITerminalNode ConstantKeyword() { return GetToken(SolidityParser.ConstantKeyword, 0); }
		public ITerminalNode ViewKeyword() { return GetToken(SolidityParser.ViewKeyword, 0); }
		public ITerminalNode PayableKeyword() { return GetToken(SolidityParser.PayableKeyword, 0); }
		public StateMutabilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stateMutability; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStateMutability(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStateMutability(this);
		}
	}

	[RuleVersion(0)]
	public StateMutabilityContext stateMutability() {
		StateMutabilityContext _localctx = new StateMutabilityContext(Context, State);
		EnterRule(_localctx, 74, RULE_stateMutability);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 520;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 107)) & ~0x3f) == 0 && ((1L << (_la - 107)) & ((1L << (ConstantKeyword - 107)) | (1L << (PayableKeyword - 107)) | (1L << (PureKeyword - 107)) | (1L << (ViewKeyword - 107)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(T__13);
			State = 526;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__13) | (1L << T__20) | (1L << T__23) | (1L << T__27) | (1L << T__31) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__40) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << T__47) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (BreakKeyword - 93)) | (1L << (ContinueKeyword - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
				{
				{
				State = 523; statement();
				}
				}
				State = 528;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 529; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public InlineAssemblyStatementContext inlineAssemblyStatement() {
			return GetRuleContext<InlineAssemblyStatementContext>(0);
		}
		public DoWhileStatementContext doWhileStatement() {
			return GetRuleContext<DoWhileStatementContext>(0);
		}
		public ContinueStatementContext continueStatement() {
			return GetRuleContext<ContinueStatementContext>(0);
		}
		public BreakStatementContext breakStatement() {
			return GetRuleContext<BreakStatementContext>(0);
		}
		public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		public ThrowStatementContext throwStatement() {
			return GetRuleContext<ThrowStatementContext>(0);
		}
		public EmitStatementContext emitStatement() {
			return GetRuleContext<EmitStatementContext>(0);
		}
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 78, RULE_statement);
		try {
			State = 543;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__40:
				EnterOuterAlt(_localctx, 1);
				{
				State = 531; ifStatement();
				}
				break;
			case T__42:
				EnterOuterAlt(_localctx, 2);
				{
				State = 532; whileStatement();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 3);
				{
				State = 533; forStatement();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 4);
				{
				State = 534; block();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 5);
				{
				State = 535; inlineAssemblyStatement();
				}
				break;
			case T__44:
				EnterOuterAlt(_localctx, 6);
				{
				State = 536; doWhileStatement();
				}
				break;
			case ContinueKeyword:
				EnterOuterAlt(_localctx, 7);
				{
				State = 537; continueStatement();
				}
				break;
			case BreakKeyword:
				EnterOuterAlt(_localctx, 8);
				{
				State = 538; breakStatement();
				}
				break;
			case T__45:
				EnterOuterAlt(_localctx, 9);
				{
				State = 539; returnStatement();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 10);
				{
				State = 540; throwStatement();
				}
				break;
			case T__47:
				EnterOuterAlt(_localctx, 11);
				{
				State = 541; emitStatement();
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 12);
				{
				State = 542; simpleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext expressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_expressionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 545; expression(0);
			State = 546; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 548; Match(T__40);
			State = 549; Match(T__20);
			State = 550; expression(0);
			State = 551; Match(T__21);
			State = 552; statement();
			State = 555;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
			case 1:
				{
				State = 553; Match(T__41);
				State = 554; statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 84, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 557; Match(T__42);
			State = 558; Match(T__20);
			State = 559; expression(0);
			State = 560; Match(T__21);
			State = 561; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		public VariableDeclarationStatementContext variableDeclarationStatement() {
			return GetRuleContext<VariableDeclarationStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 86, RULE_simpleStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				{
				State = 563; variableDeclarationStatement();
				}
				break;
			case 2:
				{
				State = 564; expressionStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 88, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(T__23);
			State = 568; Match(T__20);
			State = 571;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__27:
			case T__31:
			case T__33:
			case T__35:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 569; simpleStatement();
				}
				break;
			case T__1:
				{
				State = 570; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 575;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__12:
			case T__20:
			case T__31:
			case T__33:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				{
				State = 573; expressionStatement();
				}
				break;
			case T__1:
				{
				State = 574; Match(T__1);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
				{
				State = 577; expression(0);
				}
			}

			State = 580; Match(T__21);
			State = 581; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InlineAssemblyStatementContext : ParserRuleContext {
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public InlineAssemblyStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inlineAssemblyStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterInlineAssemblyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitInlineAssemblyStatement(this);
		}
	}

	[RuleVersion(0)]
	public InlineAssemblyStatementContext inlineAssemblyStatement() {
		InlineAssemblyStatementContext _localctx = new InlineAssemblyStatementContext(Context, State);
		EnterRule(_localctx, 90, RULE_inlineAssemblyStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 583; Match(T__43);
			State = 585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==StringLiteral) {
				{
				State = 584; Match(StringLiteral);
				}
			}

			State = 587; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoWhileStatementContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DoWhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doWhileStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterDoWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitDoWhileStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoWhileStatementContext doWhileStatement() {
		DoWhileStatementContext _localctx = new DoWhileStatementContext(Context, State);
		EnterRule(_localctx, 92, RULE_doWhileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 589; Match(T__44);
			State = 590; statement();
			State = 591; Match(T__42);
			State = 592; Match(T__20);
			State = 593; expression(0);
			State = 594; Match(T__21);
			State = 595; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueStatementContext : ParserRuleContext {
		public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public ContinueStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continueStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}

	[RuleVersion(0)]
	public ContinueStatementContext continueStatement() {
		ContinueStatementContext _localctx = new ContinueStatementContext(Context, State);
		EnterRule(_localctx, 94, RULE_continueStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 597; Match(ContinueKeyword);
			State = 598; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakStatementContext : ParserRuleContext {
		public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public BreakStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_breakStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}

	[RuleVersion(0)]
	public BreakStatementContext breakStatement() {
		BreakStatementContext _localctx = new BreakStatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_breakStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 600; Match(BreakKeyword);
			State = 601; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 603; Match(T__45);
			State = 605;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
				{
				State = 604; expression(0);
				}
			}

			State = 607; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowStatementContext : ParserRuleContext {
		public ThrowStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThrowStatementContext throwStatement() {
		ThrowStatementContext _localctx = new ThrowStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_throwStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 609; Match(T__46);
			State = 610; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmitStatementContext : ParserRuleContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public EmitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emitStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterEmitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitEmitStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmitStatementContext emitStatement() {
		EmitStatementContext _localctx = new EmitStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_emitStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; Match(T__47);
			State = 613; functionCall();
			State = 614; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationStatementContext : ParserRuleContext {
		public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public VariableDeclarationListContext variableDeclarationList() {
			return GetRuleContext<VariableDeclarationListContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationStatementContext variableDeclarationStatement() {
		VariableDeclarationStatementContext _localctx = new VariableDeclarationStatementContext(Context, State);
		EnterRule(_localctx, 104, RULE_variableDeclarationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				{
				State = 616; Match(T__48);
				State = 617; identifierList();
				}
				break;
			case 2:
				{
				State = 618; variableDeclaration();
				}
				break;
			case 3:
				{
				State = 619; Match(T__20);
				State = 620; variableDeclarationList();
				State = 621; Match(T__21);
				}
				break;
			}
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__8) {
				{
				State = 625; Match(T__8);
				State = 626; expression(0);
				}
			}

			State = 629; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationListContext : ParserRuleContext {
		public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		public VariableDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterVariableDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitVariableDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationListContext variableDeclarationList() {
		VariableDeclarationListContext _localctx = new VariableDeclarationListContext(Context, State);
		EnterRule(_localctx, 106, RULE_variableDeclarationList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
				{
				State = 631; variableDeclaration();
				}
			}

			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 634; Match(T__14);
				State = 636;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__27) | (1L << T__33) | (1L << T__35) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (Identifier - 93)))) != 0)) {
					{
					State = 635; variableDeclaration();
					}
				}

				}
				}
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 108, RULE_identifierList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 643; Match(T__20);
			State = 650;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__12 || _la==T__39 || _la==Identifier) {
						{
						State = 644; identifier();
						}
					}

					State = 647; Match(T__14);
					}
					} 
				}
				State = 652;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 653; identifier();
				}
			}

			State = 656; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameContext : ParserRuleContext {
		public ITerminalNode Int() { return GetToken(SolidityParser.Int, 0); }
		public ITerminalNode Uint() { return GetToken(SolidityParser.Uint, 0); }
		public ITerminalNode Byte() { return GetToken(SolidityParser.Byte, 0); }
		public ITerminalNode Fixed() { return GetToken(SolidityParser.Fixed, 0); }
		public ITerminalNode Ufixed() { return GetToken(SolidityParser.Ufixed, 0); }
		public ElementaryTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeName(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameContext elementaryTypeName() {
		ElementaryTypeNameContext _localctx = new ElementaryTypeNameContext(Context, State);
		EnterRule(_localctx, 110, RULE_elementaryTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (T__33 - 34)) | (1L << (T__48 - 34)) | (1L << (T__49 - 34)) | (1L << (T__50 - 34)) | (1L << (T__51 - 34)) | (1L << (Int - 34)) | (1L << (Uint - 34)) | (1L << (Byte - 34)) | (1L << (Fixed - 34)) | (1L << (Ufixed - 34)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 112;
		EnterRecursionRule(_localctx, 112, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 661; Match(T__54);
				State = 662; typeName(0);
				}
				break;
			case 2:
				{
				State = 663; Match(T__20);
				State = 664; expression(0);
				State = 665; Match(T__21);
				}
				break;
			case 3:
				{
				State = 667;
				_la = TokenStream.LA(1);
				if ( !(_la==T__52 || _la==T__53) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 668; expression(19);
				}
				break;
			case 4:
				{
				State = 669;
				_la = TokenStream.LA(1);
				if ( !(_la==T__55 || _la==T__56) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 670; expression(18);
				}
				break;
			case 5:
				{
				State = 671;
				_la = TokenStream.LA(1);
				if ( !(_la==T__57 || _la==T__58) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 672; expression(17);
				}
				break;
			case 6:
				{
				State = 673; Match(T__59);
				State = 674; expression(16);
				}
				break;
			case 7:
				{
				State = 675; Match(T__3);
				State = 676; expression(15);
				}
				break;
			case 8:
				{
				State = 677; primaryExpression();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 739;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 737;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 680;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 681; Match(T__60);
						State = 682; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 683;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 684;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << T__61) | (1L << T__62))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 685; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 686;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 687;
						_la = TokenStream.LA(1);
						if ( !(_la==T__55 || _la==T__56) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 688; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 689;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 690;
						_la = TokenStream.LA(1);
						if ( !(_la==T__63 || _la==T__64) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 691; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 692;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 693; Match(T__65);
						State = 694; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 695;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 696; Match(T__2);
						State = 697; expression(10);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 698;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 699; Match(T__66);
						State = 700; expression(9);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 701;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 702;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 703; expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 704;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 705;
						_la = TokenStream.LA(1);
						if ( !(_la==T__67 || _la==T__68) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 706; expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 707;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 708; Match(T__69);
						State = 709; expression(6);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 710;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 711; Match(T__70);
						State = 712; expression(5);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 713;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 714; Match(T__71);
						State = 715; expression(0);
						State = 716; Match(T__72);
						State = 717; expression(4);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 719;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 720;
						_la = TokenStream.LA(1);
						if ( !(_la==T__8 || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (T__73 - 74)) | (1L << (T__74 - 74)) | (1L << (T__75 - 74)) | (1L << (T__76 - 74)) | (1L << (T__77 - 74)) | (1L << (T__78 - 74)) | (1L << (T__79 - 74)) | (1L << (T__80 - 74)) | (1L << (T__81 - 74)) | (1L << (T__82 - 74)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 721; expression(3);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 722;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 723;
						_la = TokenStream.LA(1);
						if ( !(_la==T__52 || _la==T__53) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 724;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 725; Match(T__31);
						State = 726; expression(0);
						State = 727; Match(T__32);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 729;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 730; Match(T__20);
						State = 731; functionCallArguments();
						State = 732; Match(T__21);
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 734;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 735; Match(T__34);
						State = 736; identifier();
						}
						break;
					}
					} 
				}
				State = 741;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public ITerminalNode BooleanLiteral() { return GetToken(SolidityParser.BooleanLiteral, 0); }
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode TypeKeyword() { return GetToken(SolidityParser.TypeKeyword, 0); }
		public TupleExpressionContext tupleExpression() {
			return GetRuleContext<TupleExpressionContext>(0);
		}
		public ElementaryTypeNameExpressionContext elementaryTypeNameExpression() {
			return GetRuleContext<ElementaryTypeNameExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext primaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_primaryExpression);
		try {
			State = 758;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BooleanLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 742; Match(BooleanLiteral);
				}
				break;
			case DecimalNumber:
			case HexNumber:
				EnterOuterAlt(_localctx, 2);
				{
				State = 743; numberLiteral();
				}
				break;
			case HexLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 744; Match(HexLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 745; Match(StringLiteral);
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 5);
				{
				State = 746; identifier();
				State = 749;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
				case 1:
					{
					State = 747; Match(T__31);
					State = 748; Match(T__32);
					}
					break;
				}
				}
				break;
			case TypeKeyword:
				EnterOuterAlt(_localctx, 6);
				{
				State = 751; Match(TypeKeyword);
				}
				break;
			case T__20:
			case T__31:
				EnterOuterAlt(_localctx, 7);
				{
				State = 752; tupleExpression();
				}
				break;
			case T__33:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
				EnterOuterAlt(_localctx, 8);
				{
				State = 753; elementaryTypeNameExpression();
				State = 756;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 754; Match(T__31);
					State = 755; Match(T__32);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 116, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760; expression(0);
			State = 765;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 761; Match(T__14);
				State = 762; expression(0);
				}
				}
				State = 767;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueListContext : ParserRuleContext {
		public NameValueContext[] nameValue() {
			return GetRuleContexts<NameValueContext>();
		}
		public NameValueContext nameValue(int i) {
			return GetRuleContext<NameValueContext>(i);
		}
		public NameValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValueList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValueList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValueList(this);
		}
	}

	[RuleVersion(0)]
	public NameValueListContext nameValueList() {
		NameValueListContext _localctx = new NameValueListContext(Context, State);
		EnterRule(_localctx, 118, RULE_nameValueList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 768; nameValue();
			State = 773;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 769; Match(T__14);
					State = 770; nameValue();
					}
					} 
				}
				State = 775;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,79,Context);
			}
			State = 777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 776; Match(T__14);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameValueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNameValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNameValue(this);
		}
	}

	[RuleVersion(0)]
	public NameValueContext nameValue() {
		NameValueContext _localctx = new NameValueContext(Context, State);
		EnterRule(_localctx, 120, RULE_nameValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 779; identifier();
			State = 780; Match(T__72);
			State = 781; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallArgumentsContext : ParserRuleContext {
		public NameValueListContext nameValueList() {
			return GetRuleContext<NameValueListContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public FunctionCallArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCallArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCallArguments(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallArgumentsContext functionCallArguments() {
		FunctionCallArgumentsContext _localctx = new FunctionCallArgumentsContext(Context, State);
		EnterRule(_localctx, 122, RULE_functionCallArguments);
		int _la;
		try {
			State = 791;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 783; Match(T__13);
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__12 || _la==T__39 || _la==Identifier) {
					{
					State = 784; nameValueList();
					}
				}

				State = 787; Match(T__15);
				}
				break;
			case T__3:
			case T__12:
			case T__20:
			case T__21:
			case T__31:
			case T__33:
			case T__39:
			case T__48:
			case T__49:
			case T__50:
			case T__51:
			case T__52:
			case T__53:
			case T__54:
			case T__55:
			case T__56:
			case T__57:
			case T__58:
			case T__59:
			case Int:
			case Uint:
			case Byte:
			case Fixed:
			case Ufixed:
			case BooleanLiteral:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case TypeKeyword:
			case Identifier:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
					{
					State = 788; expressionList();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallArgumentsContext functionCallArguments() {
			return GetRuleContext<FunctionCallArgumentsContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 124, RULE_functionCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; expression(0);
			State = 794; Match(T__20);
			State = 795; functionCallArguments();
			State = 796; Match(T__21);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyBlockContext : ParserRuleContext {
		public AssemblyItemContext[] assemblyItem() {
			return GetRuleContexts<AssemblyItemContext>();
		}
		public AssemblyItemContext assemblyItem(int i) {
			return GetRuleContext<AssemblyItemContext>(i);
		}
		public AssemblyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyBlock(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyBlockContext assemblyBlock() {
		AssemblyBlockContext _localctx = new AssemblyBlockContext(Context, State);
		EnterRule(_localctx, 126, RULE_assemblyBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 798; Match(T__13);
			State = 802;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__13) | (1L << T__20) | (1L << T__23) | (1L << T__27) | (1L << T__33) | (1L << T__39) | (1L << T__40) | (1L << T__43) | (1L << T__45) | (1L << T__51))) != 0) || ((((_la - 84)) & ~0x3f) == 0 && ((1L << (_la - 84)) & ((1L << (T__83 - 84)) | (1L << (T__85 - 84)) | (1L << (T__86 - 84)) | (1L << (DecimalNumber - 84)) | (1L << (HexNumber - 84)) | (1L << (HexLiteral - 84)) | (1L << (BreakKeyword - 84)) | (1L << (ContinueKeyword - 84)) | (1L << (Identifier - 84)) | (1L << (StringLiteral - 84)))) != 0)) {
				{
				{
				State = 799; assemblyItem();
				}
				}
				State = 804;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 805; Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyItemContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
			return GetRuleContext<AssemblyLocalDefinitionContext>(0);
		}
		public AssemblyAssignmentContext assemblyAssignment() {
			return GetRuleContext<AssemblyAssignmentContext>(0);
		}
		public AssemblyStackAssignmentContext assemblyStackAssignment() {
			return GetRuleContext<AssemblyStackAssignmentContext>(0);
		}
		public LabelDefinitionContext labelDefinition() {
			return GetRuleContext<LabelDefinitionContext>(0);
		}
		public AssemblySwitchContext assemblySwitch() {
			return GetRuleContext<AssemblySwitchContext>(0);
		}
		public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
			return GetRuleContext<AssemblyFunctionDefinitionContext>(0);
		}
		public AssemblyForContext assemblyFor() {
			return GetRuleContext<AssemblyForContext>(0);
		}
		public AssemblyIfContext assemblyIf() {
			return GetRuleContext<AssemblyIfContext>(0);
		}
		public ITerminalNode BreakKeyword() { return GetToken(SolidityParser.BreakKeyword, 0); }
		public ITerminalNode ContinueKeyword() { return GetToken(SolidityParser.ContinueKeyword, 0); }
		public SubAssemblyContext subAssembly() {
			return GetRuleContext<SubAssemblyContext>(0);
		}
		public NumberLiteralContext numberLiteral() {
			return GetRuleContext<NumberLiteralContext>(0);
		}
		public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyItem; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyItem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyItem(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyItemContext assemblyItem() {
		AssemblyItemContext _localctx = new AssemblyItemContext(Context, State);
		EnterRule(_localctx, 128, RULE_assemblyItem);
		try {
			State = 824;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 807; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 808; assemblyBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 809; assemblyExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 810; assemblyLocalDefinition();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 811; assemblyAssignment();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 812; assemblyStackAssignment();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 813; labelDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 814; assemblySwitch();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 815; assemblyFunctionDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 816; assemblyFor();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 817; assemblyIf();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 818; Match(BreakKeyword);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 819; Match(ContinueKeyword);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 820; subAssembly();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 821; numberLiteral();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 822; Match(StringLiteral);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 823; Match(HexLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyExpressionContext : ParserRuleContext {
		public AssemblyCallContext assemblyCall() {
			return GetRuleContext<AssemblyCallContext>(0);
		}
		public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyExpressionContext assemblyExpression() {
		AssemblyExpressionContext _localctx = new AssemblyExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_assemblyExpression);
		try {
			State = 828;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 826; assemblyCall();
				}
				break;
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case StringLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 827; assemblyLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCallContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCall(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCallContext assemblyCall() {
		AssemblyCallContext _localctx = new AssemblyCallContext(Context, State);
		EnterRule(_localctx, 132, RULE_assemblyCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 834;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__45:
				{
				State = 830; Match(T__45);
				}
				break;
			case T__33:
				{
				State = 831; Match(T__33);
				}
				break;
			case T__51:
				{
				State = 832; Match(T__51);
				}
				break;
			case T__12:
			case T__39:
			case Identifier:
				{
				State = 833; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 848;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				{
				State = 836; Match(T__20);
				State = 838;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__12) | (1L << T__33) | (1L << T__39) | (1L << T__45) | (1L << T__51))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (DecimalNumber - 100)) | (1L << (HexNumber - 100)) | (1L << (HexLiteral - 100)) | (1L << (Identifier - 100)) | (1L << (StringLiteral - 100)))) != 0)) {
					{
					State = 837; assemblyExpression();
					}
				}

				State = 844;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 840; Match(T__14);
					State = 841; assemblyExpression();
					}
					}
					State = 846;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 847; Match(T__21);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLocalDefinitionContext : ParserRuleContext {
		public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyLocalDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLocalDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLocalDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLocalDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLocalDefinitionContext assemblyLocalDefinition() {
		AssemblyLocalDefinitionContext _localctx = new AssemblyLocalDefinitionContext(Context, State);
		EnterRule(_localctx, 134, RULE_assemblyLocalDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 850; Match(T__83);
			State = 851; assemblyIdentifierOrList();
			State = 854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__84) {
				{
				State = 852; Match(T__84);
				State = 853; assemblyExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyAssignmentContext : ParserRuleContext {
		public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
			return GetRuleContext<AssemblyIdentifierOrListContext>(0);
		}
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyAssignmentContext assemblyAssignment() {
		AssemblyAssignmentContext _localctx = new AssemblyAssignmentContext(Context, State);
		EnterRule(_localctx, 136, RULE_assemblyAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 856; assemblyIdentifierOrList();
			State = 857; Match(T__84);
			State = 858; assemblyExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierOrListContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyIdentifierOrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierOrList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierOrList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierOrList(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierOrListContext assemblyIdentifierOrList() {
		AssemblyIdentifierOrListContext _localctx = new AssemblyIdentifierOrListContext(Context, State);
		EnterRule(_localctx, 138, RULE_assemblyIdentifierOrList);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__12:
			case T__39:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 860; identifier();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 2);
				{
				State = 861; Match(T__20);
				State = 862; assemblyIdentifierList();
				State = 863; Match(T__21);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIdentifierListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public AssemblyIdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIdentifierList; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIdentifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIdentifierListContext assemblyIdentifierList() {
		AssemblyIdentifierListContext _localctx = new AssemblyIdentifierListContext(Context, State);
		EnterRule(_localctx, 140, RULE_assemblyIdentifierList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 867; identifier();
			State = 872;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 868; Match(T__14);
				State = 869; identifier();
				}
				}
				State = 874;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyStackAssignmentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyStackAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyStackAssignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyStackAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyStackAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyStackAssignmentContext assemblyStackAssignment() {
		AssemblyStackAssignmentContext _localctx = new AssemblyStackAssignmentContext(Context, State);
		EnterRule(_localctx, 142, RULE_assemblyStackAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 875; Match(T__85);
			State = 876; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LabelDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterLabelDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitLabelDefinition(this);
		}
	}

	[RuleVersion(0)]
	public LabelDefinitionContext labelDefinition() {
		LabelDefinitionContext _localctx = new LabelDefinitionContext(Context, State);
		EnterRule(_localctx, 144, RULE_labelDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 878; identifier();
			State = 879; Match(T__72);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblySwitchContext : ParserRuleContext {
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyCaseContext[] assemblyCase() {
			return GetRuleContexts<AssemblyCaseContext>();
		}
		public AssemblyCaseContext assemblyCase(int i) {
			return GetRuleContext<AssemblyCaseContext>(i);
		}
		public AssemblySwitchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblySwitch; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblySwitch(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblySwitch(this);
		}
	}

	[RuleVersion(0)]
	public AssemblySwitchContext assemblySwitch() {
		AssemblySwitchContext _localctx = new AssemblySwitchContext(Context, State);
		EnterRule(_localctx, 146, RULE_assemblySwitch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 881; Match(T__86);
			State = 882; assemblyExpression();
			State = 886;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__87 || _la==T__88) {
				{
				{
				State = 883; assemblyCase();
				}
				}
				State = 888;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyCaseContext : ParserRuleContext {
		public AssemblyLiteralContext assemblyLiteral() {
			return GetRuleContext<AssemblyLiteralContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyCaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyCase; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyCase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyCase(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyCaseContext assemblyCase() {
		AssemblyCaseContext _localctx = new AssemblyCaseContext(Context, State);
		EnterRule(_localctx, 148, RULE_assemblyCase);
		try {
			State = 895;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__87:
				EnterOuterAlt(_localctx, 1);
				{
				State = 889; Match(T__87);
				State = 890; assemblyLiteral();
				State = 891; assemblyBlock();
				}
				break;
			case T__88:
				EnterOuterAlt(_localctx, 2);
				{
				State = 893; Match(T__88);
				State = 894; assemblyBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionDefinitionContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
			return GetRuleContext<AssemblyFunctionReturnsContext>(0);
		}
		public AssemblyFunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionDefinition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionDefinitionContext assemblyFunctionDefinition() {
		AssemblyFunctionDefinitionContext _localctx = new AssemblyFunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 150, RULE_assemblyFunctionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 897; Match(T__27);
			State = 898; identifier();
			State = 899; Match(T__20);
			State = 901;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__12 || _la==T__39 || _la==Identifier) {
				{
				State = 900; assemblyIdentifierList();
				}
			}

			State = 903; Match(T__21);
			State = 905;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__89) {
				{
				State = 904; assemblyFunctionReturns();
				}
			}

			State = 907; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyFunctionReturnsContext : ParserRuleContext {
		public AssemblyIdentifierListContext assemblyIdentifierList() {
			return GetRuleContext<AssemblyIdentifierListContext>(0);
		}
		public AssemblyFunctionReturnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFunctionReturns; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFunctionReturns(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFunctionReturns(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyFunctionReturnsContext assemblyFunctionReturns() {
		AssemblyFunctionReturnsContext _localctx = new AssemblyFunctionReturnsContext(Context, State);
		EnterRule(_localctx, 152, RULE_assemblyFunctionReturns);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 909; Match(T__89);
			State = 910; assemblyIdentifierList();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyForContext : ParserRuleContext {
		public AssemblyExpressionContext[] assemblyExpression() {
			return GetRuleContexts<AssemblyExpressionContext>();
		}
		public AssemblyExpressionContext assemblyExpression(int i) {
			return GetRuleContext<AssemblyExpressionContext>(i);
		}
		public AssemblyBlockContext[] assemblyBlock() {
			return GetRuleContexts<AssemblyBlockContext>();
		}
		public AssemblyBlockContext assemblyBlock(int i) {
			return GetRuleContext<AssemblyBlockContext>(i);
		}
		public AssemblyForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyFor(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyForContext assemblyFor() {
		AssemblyForContext _localctx = new AssemblyForContext(Context, State);
		EnterRule(_localctx, 154, RULE_assemblyFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 912; Match(T__23);
			State = 915;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 913; assemblyBlock();
				}
				break;
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 914; assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 917; assemblyExpression();
			State = 920;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				{
				State = 918; assemblyBlock();
				}
				break;
			case T__12:
			case T__33:
			case T__39:
			case T__45:
			case T__51:
			case DecimalNumber:
			case HexNumber:
			case HexLiteral:
			case Identifier:
			case StringLiteral:
				{
				State = 919; assemblyExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 922; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyIfContext : ParserRuleContext {
		public AssemblyExpressionContext assemblyExpression() {
			return GetRuleContext<AssemblyExpressionContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public AssemblyIfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyIf; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyIf(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyIf(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyIfContext assemblyIf() {
		AssemblyIfContext _localctx = new AssemblyIfContext(Context, State);
		EnterRule(_localctx, 156, RULE_assemblyIf);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 924; Match(T__40);
			State = 925; assemblyExpression();
			State = 926; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssemblyLiteralContext : ParserRuleContext {
		public ITerminalNode StringLiteral() { return GetToken(SolidityParser.StringLiteral, 0); }
		public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		public ITerminalNode HexLiteral() { return GetToken(SolidityParser.HexLiteral, 0); }
		public AssemblyLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assemblyLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterAssemblyLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitAssemblyLiteral(this);
		}
	}

	[RuleVersion(0)]
	public AssemblyLiteralContext assemblyLiteral() {
		AssemblyLiteralContext _localctx = new AssemblyLiteralContext(Context, State);
		EnterRule(_localctx, 158, RULE_assemblyLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 928;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (DecimalNumber - 100)) | (1L << (HexNumber - 100)) | (1L << (HexLiteral - 100)) | (1L << (StringLiteral - 100)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubAssemblyContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssemblyBlockContext assemblyBlock() {
			return GetRuleContext<AssemblyBlockContext>(0);
		}
		public SubAssemblyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subAssembly; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterSubAssembly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitSubAssembly(this);
		}
	}

	[RuleVersion(0)]
	public SubAssemblyContext subAssembly() {
		SubAssemblyContext _localctx = new SubAssemblyContext(Context, State);
		EnterRule(_localctx, 160, RULE_subAssembly);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 930; Match(T__43);
			State = 931; identifier();
			State = 932; assemblyBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public TupleExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}

	[RuleVersion(0)]
	public TupleExpressionContext tupleExpression() {
		TupleExpressionContext _localctx = new TupleExpressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_tupleExpression);
		int _la;
		try {
			State = 960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 934; Match(T__20);
				{
				State = 936;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
					{
					State = 935; expression(0);
					}
				}

				State = 944;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__14) {
					{
					{
					State = 938; Match(T__14);
					State = 940;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
						{
						State = 939; expression(0);
						}
					}

					}
					}
					State = 946;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				State = 947; Match(T__21);
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 2);
				{
				State = 948; Match(T__31);
				State = 957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__12) | (1L << T__20) | (1L << T__31) | (1L << T__33) | (1L << T__39) | (1L << T__48) | (1L << T__49) | (1L << T__50) | (1L << T__51) | (1L << T__52) | (1L << T__53) | (1L << T__54) | (1L << T__55) | (1L << T__56) | (1L << T__57) | (1L << T__58) | (1L << T__59))) != 0) || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (Int - 93)) | (1L << (Uint - 93)) | (1L << (Byte - 93)) | (1L << (Fixed - 93)) | (1L << (Ufixed - 93)) | (1L << (BooleanLiteral - 93)) | (1L << (DecimalNumber - 93)) | (1L << (HexNumber - 93)) | (1L << (HexLiteral - 93)) | (1L << (TypeKeyword - 93)) | (1L << (Identifier - 93)) | (1L << (StringLiteral - 93)))) != 0)) {
					{
					State = 949; expression(0);
					State = 954;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__14) {
						{
						{
						State = 950; Match(T__14);
						State = 951; expression(0);
						}
						}
						State = 956;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 959; Match(T__32);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementaryTypeNameExpressionContext : ParserRuleContext {
		public ElementaryTypeNameContext elementaryTypeName() {
			return GetRuleContext<ElementaryTypeNameContext>(0);
		}
		public ElementaryTypeNameExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementaryTypeNameExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterElementaryTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitElementaryTypeNameExpression(this);
		}
	}

	[RuleVersion(0)]
	public ElementaryTypeNameExpressionContext elementaryTypeNameExpression() {
		ElementaryTypeNameExpressionContext _localctx = new ElementaryTypeNameExpressionContext(Context, State);
		EnterRule(_localctx, 164, RULE_elementaryTypeNameExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 962; elementaryTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberLiteralContext : ParserRuleContext {
		public ITerminalNode DecimalNumber() { return GetToken(SolidityParser.DecimalNumber, 0); }
		public ITerminalNode HexNumber() { return GetToken(SolidityParser.HexNumber, 0); }
		public ITerminalNode NumberUnit() { return GetToken(SolidityParser.NumberUnit, 0); }
		public NumberLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numberLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumberLiteralContext numberLiteral() {
		NumberLiteralContext _localctx = new NumberLiteralContext(Context, State);
		EnterRule(_localctx, 166, RULE_numberLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			_la = TokenStream.LA(1);
			if ( !(_la==DecimalNumber || _la==HexNumber) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 965; Match(NumberUnit);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(SolidityParser.Identifier, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISolidityListener typedListener = listener as ISolidityListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			_la = TokenStream.LA(1);
			if ( !(_la==T__12 || _la==T__39 || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 32: return typeName_sempred((TypeNameContext)_localctx, predIndex);
		case 56: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool typeName_sempred(TypeNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 14);
		case 2: return Precpred(Context, 13);
		case 3: return Precpred(Context, 12);
		case 4: return Precpred(Context, 11);
		case 5: return Precpred(Context, 10);
		case 6: return Precpred(Context, 9);
		case 7: return Precpred(Context, 8);
		case 8: return Precpred(Context, 7);
		case 9: return Precpred(Context, 6);
		case 10: return Precpred(Context, 5);
		case 11: return Precpred(Context, 4);
		case 12: return Precpred(Context, 3);
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 25);
		case 15: return Precpred(Context, 23);
		case 16: return Precpred(Context, 22);
		case 17: return Precpred(Context, 21);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '|', '\x3CD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xB0', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xB3', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x5', '\x5', '\xC0', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x5', '\x6', '\xC4', '\n', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\b', '\x5', '\b', '\xC9', '\n', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\xD0', '\n', '\t', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xD6', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', 
		'\n', '\xDC', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xE0', 
		'\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\xEA', '\n', 
		'\n', '\f', '\n', '\xE', '\n', '\xED', '\v', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\xF4', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x5', '\f', '\xF9', '\n', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\a', '\f', '\x101', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x104', '\v', '\f', '\x5', '\f', '\x106', '\n', '\f', '\x3', '\f', '\x3', 
		'\f', '\a', '\f', '\x10A', '\n', '\f', '\f', '\f', '\xE', '\f', '\x10D', 
		'\v', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\x114', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x117', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\x121', 
		'\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\x125', '\n', '\xF', 
		'\f', '\xF', '\xE', '\xF', '\x128', '\v', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x12D', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x5', '\x10', '\x136', '\n', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x142', 
		'\n', '\x11', '\f', '\x11', '\xE', '\x11', '\x145', '\v', '\x11', '\x5', 
		'\x11', '\x147', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x153', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', 
		'\x14', '\x15A', '\n', '\x14', '\x3', '\x14', '\x5', '\x14', '\x15D', 
		'\n', '\x14', '\x3', '\x15', '\x5', '\x15', '\x160', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x164', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x169', '\n', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x16D', '\n', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x178', '\n', 
		'\x17', '\f', '\x17', '\xE', '\x17', '\x17B', '\v', '\x17', '\x3', '\x18', 
		'\x5', '\x18', '\x17E', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x184', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x18E', '\n', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\a', '\x1A', '\x192', '\n', '\x1A', '\f', '\x1A', 
		'\xE', '\x1A', '\x195', '\v', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', '\x19D', 
		'\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x1A0', '\v', '\x1B', '\x5', 
		'\x1B', '\x1A2', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x5', '\x1C', '\x1A8', '\n', '\x1C', '\x3', '\x1C', '\x5', 
		'\x1C', '\x1AB', '\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\a', '\x1D', '\x1B1', '\n', '\x1D', '\f', '\x1D', '\xE', 
		'\x1D', '\x1B4', '\v', '\x1D', '\x5', '\x1D', '\x1B6', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1BC', 
		'\n', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x1BF', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x1C5', 
		'\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x1C8', '\v', '\x1F', '\x5', 
		'\x1F', '\x1CA', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', 
		'\x3', ' ', '\x5', ' ', '\x1D0', '\n', ' ', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x1D4', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1DF', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', 
		'\"', '\x1E4', '\n', '\"', '\x3', '\"', '\a', '\"', '\x1E7', '\n', '\"', 
		'\f', '\"', '\xE', '\"', '\x1EA', '\v', '\"', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\a', '#', '\x1EF', '\n', '#', '\f', '#', '\xE', '#', '\x1F2', 
		'\v', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\a', '%', '\x200', '\n', '%', '\f', '%', '\xE', '%', '\x203', 
		'\v', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x207', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x20F', '\n', '(', '\f', '(', '\xE', '(', '\x212', '\v', '(', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', 
		')', '\x3', ')', '\x5', ')', '\x222', '\n', ')', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', 
		'\x3', '+', '\x3', '+', '\x5', '+', '\x22E', '\n', '+', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x238', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x5', '.', '\x23E', '\n', '.', '\x3', '.', '\x3', '.', '\x5', 
		'.', '\x242', '\n', '.', '\x3', '.', '\x5', '.', '\x245', '\n', '.', '\x3', 
		'.', '\x3', '.', '\x3', '.', '\x3', '/', '\x3', '/', '\x5', '/', '\x24C', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x260', 
		'\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x35', 
		'\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x36', '\x5', '\x36', '\x272', '\n', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x5', '\x36', '\x276', '\n', '\x36', '\x3', '\x36', 
		'\x3', '\x36', '\x3', '\x37', '\x5', '\x37', '\x27B', '\n', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x5', '\x37', '\x27F', '\n', '\x37', '\a', '\x37', 
		'\x281', '\n', '\x37', '\f', '\x37', '\xE', '\x37', '\x284', '\v', '\x37', 
		'\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x288', '\n', '\x38', '\x3', 
		'\x38', '\a', '\x38', '\x28B', '\n', '\x38', '\f', '\x38', '\xE', '\x38', 
		'\x28E', '\v', '\x38', '\x3', '\x38', '\x5', '\x38', '\x291', '\n', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x5', ':', 
		'\x2A9', '\n', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', 
		':', '\x3', ':', '\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', '\x2E4', 
		'\n', ':', '\f', ':', '\xE', ':', '\x2E7', '\v', ':', '\x3', ';', '\x3', 
		';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x5', 
		';', '\x2F0', '\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\x3', ';', '\x5', ';', '\x2F7', '\n', ';', '\x5', ';', '\x2F9', '\n', 
		';', '\x3', '<', '\x3', '<', '\x3', '<', '\a', '<', '\x2FE', '\n', '<', 
		'\f', '<', '\xE', '<', '\x301', '\v', '<', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\a', '=', '\x306', '\n', '=', '\f', '=', '\xE', '=', '\x309', '\v', 
		'=', '\x3', '=', '\x5', '=', '\x30C', '\n', '=', '\x3', '>', '\x3', '>', 
		'\x3', '>', '\x3', '>', '\x3', '?', '\x3', '?', '\x5', '?', '\x314', '\n', 
		'?', '\x3', '?', '\x3', '?', '\x5', '?', '\x318', '\n', '?', '\x5', '?', 
		'\x31A', '\n', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x323', '\n', '\x41', 
		'\f', '\x41', '\xE', '\x41', '\x326', '\v', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x33B', '\n', '\x42', 
		'\x3', '\x43', '\x3', '\x43', '\x5', '\x43', '\x33F', '\n', '\x43', '\x3', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x345', 
		'\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', '\x349', '\n', 
		'\x44', '\x3', '\x44', '\x3', '\x44', '\a', '\x44', '\x34D', '\n', '\x44', 
		'\f', '\x44', '\xE', '\x44', '\x350', '\v', '\x44', '\x3', '\x44', '\x5', 
		'\x44', '\x353', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x359', '\n', '\x45', '\x3', '\x46', '\x3', 
		'\x46', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 'G', '\x3', 'G', 
		'\x3', 'G', '\x3', 'G', '\x5', 'G', '\x364', '\n', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\a', 'H', '\x369', '\n', 'H', '\f', 'H', '\xE', 'H', 
		'\x36C', '\v', 'H', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'J', '\x3', 
		'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\a', 'K', '\x377', 
		'\n', 'K', '\f', 'K', '\xE', 'K', '\x37A', '\v', 'K', '\x3', 'L', '\x3', 
		'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x382', 
		'\n', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x388', '\n', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', '\x38C', '\n', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 
		'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x396', '\n', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x5', 'O', '\x39B', '\n', 'O', '\x3', 'O', '\x3', 
		'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x3', 
		'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'S', '\x3', 
		'S', '\x5', 'S', '\x3AB', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', 
		'\x3AF', '\n', 'S', '\a', 'S', '\x3B1', '\n', 'S', '\f', 'S', '\xE', 'S', 
		'\x3B4', '\v', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 
		'S', '\a', 'S', '\x3BB', '\n', 'S', '\f', 'S', '\xE', 'S', '\x3BE', '\v', 
		'S', '\x5', 'S', '\x3C0', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x3C3', 
		'\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'U', '\x3', 'U', '\x5', 'U', 
		'\x3C9', '\n', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x2', '\x4', 
		'\x42', 'r', 'W', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', 
		'<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 
		'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 
		'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', 
		'\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', 
		'\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', 
		'\x2', '\x14', '\x3', '\x2', '\x5', '\v', '\x3', '\x2', ']', '^', '\x3', 
		'\x2', '\x13', '\x15', '\x5', '\x2', 'm', 'm', 'q', 'q', 's', 't', '\x3', 
		'\x2', '(', '*', '\x6', '\x2', 'm', 'm', 'r', 'r', 'u', 'u', 'w', 'w', 
		'\x5', '\x2', '$', '$', '\x33', '\x36', '_', '\x63', '\x3', '\x2', '\x37', 
		'\x38', '\x3', '\x2', ':', ';', '\x3', '\x2', '<', '=', '\x4', '\x2', 
		'\xE', '\xE', '@', '\x41', '\x3', '\x2', '\x42', '\x43', '\x3', '\x2', 
		'\a', '\n', '\x3', '\x2', '\x46', 'G', '\x4', '\x2', '\v', '\v', 'L', 
		'U', '\x5', '\x2', '\x66', 'g', 'i', 'i', 'y', 'y', '\x3', '\x2', '\x66', 
		'g', '\x5', '\x2', '\xF', '\xF', '*', '*', 'x', 'x', '\x2', '\x429', '\x2', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x4', '\xB6', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\xBB', '\x3', '\x2', '\x2', '\x2', '\b', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\n', '\xC1', '\x3', '\x2', '\x2', '\x2', '\f', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\xCC', '\x3', '\x2', '\x2', '\x2', '\x12', '\xF3', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x16', '\xF8', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x110', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x120', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x122', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x130', '\x3', '\x2', '\x2', '\x2', ' ', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x14A', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x14F', '\x3', '\x2', '\x2', '\x2', '&', '\x156', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x15F', '\x3', '\x2', '\x2', '\x2', '*', '\x16E', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x179', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x30', '\x187', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x189', '\x3', '\x2', '\x2', '\x2', '\x34', '\x198', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x1AC', '\x3', '\x2', '\x2', '\x2', ':', '\x1B9', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x1C0', '\x3', '\x2', '\x2', '\x2', '>', '\x1CD', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x44', '\x1EB', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x1F3', '\x3', '\x2', '\x2', '\x2', 'H', '\x1FA', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x20A', '\x3', '\x2', '\x2', '\x2', 'N', '\x20C', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x221', '\x3', '\x2', '\x2', '\x2', 'R', '\x223', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x226', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x22F', '\x3', '\x2', '\x2', '\x2', 'X', '\x237', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x239', '\x3', '\x2', '\x2', '\x2', '\\', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x24F', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x257', '\x3', '\x2', '\x2', '\x2', '\x62', '\x25A', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x66', '\x263', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x266', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x271', '\x3', '\x2', '\x2', '\x2', 'l', '\x27A', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x285', '\x3', '\x2', '\x2', '\x2', 'p', '\x294', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		't', '\x2F8', '\x3', '\x2', '\x2', '\x2', 'v', '\x2FA', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x302', '\x3', '\x2', '\x2', '\x2', 'z', '\x30D', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x319', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x80', '\x320', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x33A', '\x3', '\x2', '\x2', '\x2', '\x84', '\x33E', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x344', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x354', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x35A', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x363', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x365', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x36D', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x370', '\x3', '\x2', '\x2', '\x2', '\x94', '\x373', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x381', '\x3', '\x2', '\x2', '\x2', '\x98', '\x383', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x38F', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x392', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x39E', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x3A2', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x3A4', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x3C2', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x3C4', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x3C6', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xB0', 
		'\x5', '\x4', '\x3', '\x2', '\xAD', '\xB0', '\x5', '\x12', '\n', '\x2', 
		'\xAE', '\xB0', '\x5', '\x16', '\f', '\x2', '\xAF', '\xAC', '\x3', '\x2', 
		'\x2', '\x2', '\xAF', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x2', '\x2', '\x3', 
		'\xB5', '\x3', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x3', 
		'\x2', '\x2', '\xB7', '\xB8', '\x5', '\x6', '\x4', '\x2', '\xB8', '\xB9', 
		'\x5', '\b', '\x5', '\x2', '\xB9', '\xBA', '\a', '\x4', '\x2', '\x2', 
		'\xBA', '\x5', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBC', '\x5', '\xAA', 
		'V', '\x2', '\xBC', '\a', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xC0', 
		'\x5', '\n', '\x6', '\x2', '\xBE', '\xC0', '\x5', 'r', ':', '\x2', '\xBF', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xC0', '\t', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC3', '\x5', 
		'\xE', '\b', '\x2', '\xC2', '\xC4', '\x5', '\xE', '\b', '\x2', '\xC3', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\v', '\x3', '\x2', '\x2', '\x2', '\xC5', '\xC6', '\t', 
		'\x2', '\x2', '\x2', '\xC6', '\r', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xC9', '\x5', '\f', '\a', '\x2', '\xC8', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x64', '\x2', '\x2', '\xCB', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCF', '\x5', '\xAA', 'V', 
		'\x2', '\xCD', '\xCE', '\a', '\f', '\x2', '\x2', '\xCE', '\xD0', '\x5', 
		'\xAA', 'V', '\x2', '\xCF', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCF', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xD1', '\xD2', '\a', '\r', '\x2', '\x2', '\xD2', '\xD5', '\a', 
		'y', '\x2', '\x2', '\xD3', '\xD4', '\a', '\f', '\x2', '\x2', '\xD4', '\xD6', 
		'\x5', '\xAA', 'V', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\xD5', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD7', '\x3', '\x2', 
		'\x2', '\x2', '\xD7', '\xF4', '\a', '\x4', '\x2', '\x2', '\xD8', '\xDB', 
		'\a', '\r', '\x2', '\x2', '\xD9', '\xDC', '\a', '\xE', '\x2', '\x2', '\xDA', 
		'\xDC', '\x5', '\xAA', 'V', '\x2', '\xDB', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDF', '\x3', 
		'\x2', '\x2', '\x2', '\xDD', '\xDE', '\a', '\f', '\x2', '\x2', '\xDE', 
		'\xE0', '\x5', '\xAA', 'V', '\x2', '\xDF', '\xDD', '\x3', '\x2', '\x2', 
		'\x2', '\xDF', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE1', '\xE2', '\a', '\xF', '\x2', '\x2', '\xE2', 
		'\xE3', '\a', 'y', '\x2', '\x2', '\xE3', '\xF4', '\a', '\x4', '\x2', '\x2', 
		'\xE4', '\xE5', '\a', '\r', '\x2', '\x2', '\xE5', '\xE6', '\a', '\x10', 
		'\x2', '\x2', '\xE6', '\xEB', '\x5', '\x10', '\t', '\x2', '\xE7', '\xE8', 
		'\a', '\x11', '\x2', '\x2', '\xE8', '\xEA', '\x5', '\x10', '\t', '\x2', 
		'\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xED', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xEE', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEE', '\xEF', '\a', '\x12', 
		'\x2', '\x2', '\xEF', '\xF0', '\a', '\xF', '\x2', '\x2', '\xF0', '\xF1', 
		'\a', 'y', '\x2', '\x2', '\xF1', '\xF2', '\a', '\x4', '\x2', '\x2', '\xF2', 
		'\xF4', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xF3', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xF3', '\xE4', '\x3', 
		'\x2', '\x2', '\x2', '\xF4', '\x13', '\x3', '\x2', '\x2', '\x2', '\xF5', 
		'\xF6', '\t', '\x3', '\x2', '\x2', '\xF6', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\xF7', '\xF9', '\x5', '\x14', '\v', '\x2', '\xF8', '\xF7', '\x3', 
		'\x2', '\x2', '\x2', '\xF8', '\xF9', '\x3', '\x2', '\x2', '\x2', '\xF9', 
		'\xFA', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\t', '\x4', '\x2', 
		'\x2', '\xFB', '\x105', '\x5', '\xAA', 'V', '\x2', '\xFC', '\xFD', '\a', 
		'\x16', '\x2', '\x2', '\xFD', '\x102', '\x5', '\x18', '\r', '\x2', '\xFE', 
		'\xFF', '\a', '\x11', '\x2', '\x2', '\xFF', '\x101', '\x5', '\x18', '\r', 
		'\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x103', '\x3', '\x2', '\x2', '\x2', '\x103', '\x106', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x102', '\x3', '\x2', '\x2', '\x2', '\x105', 
		'\xFC', '\x3', '\x2', '\x2', '\x2', '\x105', '\x106', '\x3', '\x2', '\x2', 
		'\x2', '\x106', '\x107', '\x3', '\x2', '\x2', '\x2', '\x107', '\x10B', 
		'\a', '\x10', '\x2', '\x2', '\x108', '\x10A', '\x5', '\x1A', '\xE', '\x2', 
		'\x109', '\x108', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '\x10B', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10B', 
		'\x10C', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x10F', 
		'\a', '\x12', '\x2', '\x2', '\x10F', '\x17', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x116', '\x5', '\x44', '#', '\x2', '\x111', '\x113', '\a', '\x17', 
		'\x2', '\x2', '\x112', '\x114', '\x5', 'v', '<', '\x2', '\x113', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '\x113', '\x114', '\x3', '\x2', '\x2', '\x2', 
		'\x114', '\x115', '\x3', '\x2', '\x2', '\x2', '\x115', '\x117', '\a', 
		'\x18', '\x2', '\x2', '\x116', '\x111', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x117', '\x3', '\x2', '\x2', '\x2', '\x117', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x121', '\x5', '\x1C', '\xF', '\x2', '\x119', '\x121', 
		'\x5', '\x1E', '\x10', '\x2', '\x11A', '\x121', '\x5', ' ', '\x11', '\x2', 
		'\x11B', '\x121', '\x5', '\"', '\x12', '\x2', '\x11C', '\x121', '\x5', 
		'$', '\x13', '\x2', '\x11D', '\x121', '\x5', '(', '\x15', '\x2', '\x11E', 
		'\x121', '\x5', '.', '\x18', '\x2', '\x11F', '\x121', '\x5', '\x32', '\x1A', 
		'\x2', '\x120', '\x118', '\x3', '\x2', '\x2', '\x2', '\x120', '\x119', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x11A', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x120', 
		'\x11E', '\x3', '\x2', '\x2', '\x2', '\x120', '\x11F', '\x3', '\x2', '\x2', 
		'\x2', '\x121', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x122', '\x126', 
		'\x5', '\x42', '\"', '\x2', '\x123', '\x125', '\t', '\x5', '\x2', '\x2', 
		'\x124', '\x123', '\x3', '\x2', '\x2', '\x2', '\x125', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x129', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12C', 
		'\x5', '\xAA', 'V', '\x2', '\x12A', '\x12B', '\a', '\v', '\x2', '\x2', 
		'\x12B', '\x12D', '\x5', 'r', ':', '\x2', '\x12C', '\x12A', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x12F', '\a', '\x4', '\x2', '\x2', 
		'\x12F', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x131', '\a', '\x19', 
		'\x2', '\x2', '\x131', '\x132', '\x5', '\xAA', 'V', '\x2', '\x132', '\x135', 
		'\a', '\x1A', '\x2', '\x2', '\x133', '\x136', '\a', '\xE', '\x2', '\x2', 
		'\x134', '\x136', '\x5', '\x42', '\"', '\x2', '\x135', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x137', '\x138', '\a', '\x4', '\x2', 
		'\x2', '\x138', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\a', '\x1B', '\x2', '\x2', '\x13A', '\x13B', '\x5', '\xAA', 'V', '\x2', 
		'\x13B', '\x146', '\a', '\x10', '\x2', '\x2', '\x13C', '\x13D', '\x5', 
		'@', '!', '\x2', '\x13D', '\x143', '\a', '\x4', '\x2', '\x2', '\x13E', 
		'\x13F', '\x5', '@', '!', '\x2', '\x13F', '\x140', '\a', '\x4', '\x2', 
		'\x2', '\x140', '\x142', '\x3', '\x2', '\x2', '\x2', '\x141', '\x13E', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x145', '\x3', '\x2', '\x2', '\x2', 
		'\x143', '\x141', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x147', '\x3', '\x2', '\x2', '\x2', '\x145', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x146', '\x13C', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x148', '\x149', '\a', '\x12', '\x2', '\x2', 
		'\x149', '!', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x14B', '\a', '\x1C', 
		'\x2', '\x2', '\x14B', '\x14C', '\x5', '\x34', '\x1B', '\x2', '\x14C', 
		'\x14D', '\x5', ',', '\x17', '\x2', '\x14D', '\x14E', '\x5', 'N', '(', 
		'\x2', '\x14E', '#', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', 
		'\x1D', '\x2', '\x2', '\x150', '\x152', '\x5', '\xAA', 'V', '\x2', '\x151', 
		'\x153', '\x5', '\x34', '\x1B', '\x2', '\x152', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '\x152', '\x153', '\x3', '\x2', '\x2', '\x2', '\x153', '\x154', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x5', 'N', '(', '\x2', 
		'\x155', '%', '\x3', '\x2', '\x2', '\x2', '\x156', '\x15C', '\x5', '\xAA', 
		'V', '\x2', '\x157', '\x159', '\a', '\x17', '\x2', '\x2', '\x158', '\x15A', 
		'\x5', 'v', '<', '\x2', '\x159', '\x158', '\x3', '\x2', '\x2', '\x2', 
		'\x159', '\x15A', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x15B', '\x15D', '\a', '\x18', '\x2', '\x2', '\x15C', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\x3', '\x2', '\x2', 
		'\x2', '\x15D', '\'', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x160', '\x5', 
		'\x14', '\v', '\x2', '\x15F', '\x15E', '\x3', '\x2', '\x2', '\x2', '\x15F', 
		'\x160', '\x3', '\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', 
		'\x2', '\x161', '\x163', '\a', '\x1E', '\x2', '\x2', '\x162', '\x164', 
		'\x5', '\xAA', 'V', '\x2', '\x163', '\x162', '\x3', '\x2', '\x2', '\x2', 
		'\x163', '\x164', '\x3', '\x2', '\x2', '\x2', '\x164', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x165', '\x166', '\x5', '\x34', '\x1B', '\x2', '\x166', 
		'\x168', '\x5', ',', '\x17', '\x2', '\x167', '\x169', '\x5', '*', '\x16', 
		'\x2', '\x168', '\x167', '\x3', '\x2', '\x2', '\x2', '\x168', '\x169', 
		'\x3', '\x2', '\x2', '\x2', '\x169', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16A', '\x16D', '\a', '\x4', '\x2', '\x2', '\x16B', '\x16D', '\x5', 
		'N', '(', '\x2', '\x16C', '\x16A', '\x3', '\x2', '\x2', '\x2', '\x16C', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x16D', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x16E', '\x16F', '\a', '\x1F', '\x2', '\x2', '\x16F', '\x170', 
		'\x5', '\x34', '\x1B', '\x2', '\x170', '+', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x178', '\x5', '&', '\x14', '\x2', '\x172', '\x178', '\x5', 
		'L', '\'', '\x2', '\x173', '\x178', '\a', 'o', '\x2', '\x2', '\x174', 
		'\x178', '\a', 't', '\x2', '\x2', '\x175', '\x178', '\a', 'q', '\x2', 
		'\x2', '\x176', '\x178', '\a', 's', '\x2', '\x2', '\x177', '\x171', '\x3', 
		'\x2', '\x2', '\x2', '\x177', '\x172', '\x3', '\x2', '\x2', '\x2', '\x177', 
		'\x173', '\x3', '\x2', '\x2', '\x2', '\x177', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x175', '\x3', '\x2', '\x2', '\x2', '\x177', '\x176', 
		'\x3', '\x2', '\x2', '\x2', '\x178', '\x17B', '\x3', '\x2', '\x2', '\x2', 
		'\x179', '\x177', '\x3', '\x2', '\x2', '\x2', '\x179', '\x17A', '\x3', 
		'\x2', '\x2', '\x2', '\x17A', '-', '\x3', '\x2', '\x2', '\x2', '\x17B', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x17E', '\x5', '\x14', 
		'\v', '\x2', '\x17D', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17D', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x17F', '\x180', '\a', ' ', '\x2', '\x2', '\x180', '\x181', '\x5', '\xAA', 
		'V', '\x2', '\x181', '\x183', '\x5', '\x38', '\x1D', '\x2', '\x182', '\x184', 
		'\a', 'k', '\x2', '\x2', '\x183', '\x182', '\x3', '\x2', '\x2', '\x2', 
		'\x183', '\x184', '\x3', '\x2', '\x2', '\x2', '\x184', '\x185', '\x3', 
		'\x2', '\x2', '\x2', '\x185', '\x186', '\a', '\x4', '\x2', '\x2', '\x186', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x187', '\x188', '\x5', '\xAA', 'V', 
		'\x2', '\x188', '\x31', '\x3', '\x2', '\x2', '\x2', '\x189', '\x18A', 
		'\a', '!', '\x2', '\x2', '\x18A', '\x18B', '\x5', '\xAA', 'V', '\x2', 
		'\x18B', '\x18D', '\a', '\x10', '\x2', '\x2', '\x18C', '\x18E', '\x5', 
		'\x30', '\x19', '\x2', '\x18D', '\x18C', '\x3', '\x2', '\x2', '\x2', '\x18D', 
		'\x18E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x190', '\a', '\x11', '\x2', '\x2', '\x190', '\x192', 
		'\x5', '\x30', '\x19', '\x2', '\x191', '\x18F', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x195', '\x3', '\x2', '\x2', '\x2', '\x193', '\x191', '\x3', 
		'\x2', '\x2', '\x2', '\x193', '\x194', '\x3', '\x2', '\x2', '\x2', '\x194', 
		'\x196', '\x3', '\x2', '\x2', '\x2', '\x195', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x196', '\x197', '\a', '\x12', '\x2', '\x2', '\x197', '\x33', 
		'\x3', '\x2', '\x2', '\x2', '\x198', '\x1A1', '\a', '\x17', '\x2', '\x2', 
		'\x199', '\x19E', '\x5', '\x36', '\x1C', '\x2', '\x19A', '\x19B', '\a', 
		'\x11', '\x2', '\x2', '\x19B', '\x19D', '\x5', '\x36', '\x1C', '\x2', 
		'\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19E', 
		'\x19F', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A2', '\x3', '\x2', '\x2', 
		'\x2', '\x1A0', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A1', '\x199', 
		'\x3', '\x2', '\x2', '\x2', '\x1A1', '\x1A2', '\x3', '\x2', '\x2', '\x2', 
		'\x1A2', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A4', '\a', 
		'\x18', '\x2', '\x2', '\x1A4', '\x35', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A7', '\x5', '\x42', '\"', '\x2', '\x1A6', '\x1A8', '\x5', 'J', '&', 
		'\x2', '\x1A7', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1A7', '\x1A8', 
		'\x3', '\x2', '\x2', '\x2', '\x1A8', '\x1AA', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1AB', '\x5', '\xAA', 'V', '\x2', '\x1AA', '\x1A9', '\x3', 
		'\x2', '\x2', '\x2', '\x1AA', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\x1B5', '\a', '\x17', '\x2', 
		'\x2', '\x1AD', '\x1B2', '\x5', ':', '\x1E', '\x2', '\x1AE', '\x1AF', 
		'\a', '\x11', '\x2', '\x2', '\x1AF', '\x1B1', '\x5', ':', '\x1E', '\x2', 
		'\x1B0', '\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B1', '\x1B4', '\x3', 
		'\x2', '\x2', '\x2', '\x1B2', '\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B2', 
		'\x1B3', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1AD', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B6', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\a', 
		'\x18', '\x2', '\x2', '\x1B8', '\x39', '\x3', '\x2', '\x2', '\x2', '\x1B9', 
		'\x1BB', '\x5', '\x42', '\"', '\x2', '\x1BA', '\x1BC', '\a', 'p', '\x2', 
		'\x2', '\x1BB', '\x1BA', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x3', '\x2', '\x2', '\x2', '\x1BC', '\x1BE', '\x3', '\x2', '\x2', '\x2', 
		'\x1BD', '\x1BF', '\x5', '\xAA', 'V', '\x2', '\x1BE', '\x1BD', '\x3', 
		'\x2', '\x2', '\x2', '\x1BE', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1BF', 
		';', '\x3', '\x2', '\x2', '\x2', '\x1C0', '\x1C9', '\a', '\x17', '\x2', 
		'\x2', '\x1C1', '\x1C6', '\x5', '>', ' ', '\x2', '\x1C2', '\x1C3', '\a', 
		'\x11', '\x2', '\x2', '\x1C3', '\x1C5', '\x5', '>', ' ', '\x2', '\x1C4', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C6', '\x1C7', 
		'\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C6', '\x3', '\x2', '\x2', '\x2', '\x1C9', '\x1C1', '\x3', 
		'\x2', '\x2', '\x2', '\x1C9', '\x1CA', '\x3', '\x2', '\x2', '\x2', '\x1CA', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CB', '\x1CC', '\a', '\x18', '\x2', 
		'\x2', '\x1CC', '=', '\x3', '\x2', '\x2', '\x2', '\x1CD', '\x1CF', '\x5', 
		'\x42', '\"', '\x2', '\x1CE', '\x1D0', '\x5', 'J', '&', '\x2', '\x1CF', 
		'\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', 
		'\x2', '\x1D0', '?', '\x3', '\x2', '\x2', '\x2', '\x1D1', '\x1D3', '\x5', 
		'\x42', '\"', '\x2', '\x1D2', '\x1D4', '\x5', 'J', '&', '\x2', '\x1D3', 
		'\x1D2', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D5', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', 
		'\x5', '\xAA', 'V', '\x2', '\x1D6', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x1D7', '\x1D8', '\b', '\"', '\x1', '\x2', '\x1D8', '\x1DF', '\x5', 'p', 
		'\x39', '\x2', '\x1D9', '\x1DF', '\x5', '\x44', '#', '\x2', '\x1DA', '\x1DF', 
		'\x5', '\x46', '$', '\x2', '\x1DB', '\x1DF', '\x5', 'H', '%', '\x2', '\x1DC', 
		'\x1DD', '\a', '$', '\x2', '\x2', '\x1DD', '\x1DF', '\a', 'r', '\x2', 
		'\x2', '\x1DE', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1D9', 
		'\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DE', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1DF', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1E0', 
		'\x1E1', '\f', '\x5', '\x2', '\x2', '\x1E1', '\x1E3', '\a', '\"', '\x2', 
		'\x2', '\x1E2', '\x1E4', '\x5', 'r', ':', '\x2', '\x1E3', '\x1E2', '\x3', 
		'\x2', '\x2', '\x2', '\x1E3', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E5', '\x1E7', '\a', '#', '\x2', 
		'\x2', '\x1E6', '\x1E0', '\x3', '\x2', '\x2', '\x2', '\x1E7', '\x1EA', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', '\x3', '\x2', '\x2', '\x2', 
		'\x1E8', '\x1E9', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x43', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EB', 
		'\x1F0', '\x5', '\xAA', 'V', '\x2', '\x1EC', '\x1ED', '\a', '%', '\x2', 
		'\x2', '\x1ED', '\x1EF', '\x5', '\xAA', 'V', '\x2', '\x1EE', '\x1EC', 
		'\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F2', '\x3', '\x2', '\x2', '\x2', 
		'\x1F0', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', 
		'\x2', '\x2', '\x2', '\x1F1', '\x45', '\x3', '\x2', '\x2', '\x2', '\x1F2', 
		'\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', '\a', '&', '\x2', 
		'\x2', '\x1F4', '\x1F5', '\a', '\x17', '\x2', '\x2', '\x1F5', '\x1F6', 
		'\x5', 'p', '\x39', '\x2', '\x1F6', '\x1F7', '\a', '\'', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x5', '\x42', '\"', '\x2', '\x1F8', '\x1F9', '\a', 
		'\x18', '\x2', '\x2', '\x1F9', 'G', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FB', '\a', '\x1E', '\x2', '\x2', '\x1FB', '\x201', '\x5', '<', '\x1F', 
		'\x2', '\x1FC', '\x200', '\a', 'q', '\x2', '\x2', '\x1FD', '\x200', '\a', 
		'o', '\x2', '\x2', '\x1FE', '\x200', '\x5', 'L', '\'', '\x2', '\x1FF', 
		'\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FF', '\x1FD', '\x3', '\x2', '\x2', 
		'\x2', '\x1FF', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', '\x203', 
		'\x3', '\x2', '\x2', '\x2', '\x201', '\x1FF', '\x3', '\x2', '\x2', '\x2', 
		'\x201', '\x202', '\x3', '\x2', '\x2', '\x2', '\x202', '\x206', '\x3', 
		'\x2', '\x2', '\x2', '\x203', '\x201', '\x3', '\x2', '\x2', '\x2', '\x204', 
		'\x205', '\a', '\x1F', '\x2', '\x2', '\x205', '\x207', '\x5', '<', '\x1F', 
		'\x2', '\x206', '\x204', '\x3', '\x2', '\x2', '\x2', '\x206', '\x207', 
		'\x3', '\x2', '\x2', '\x2', '\x207', 'I', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\t', '\x6', '\x2', '\x2', '\x209', 'K', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x20B', '\t', '\a', '\x2', '\x2', '\x20B', 'M', 
		'\x3', '\x2', '\x2', '\x2', '\x20C', '\x210', '\a', '\x10', '\x2', '\x2', 
		'\x20D', '\x20F', '\x5', 'P', ')', '\x2', '\x20E', '\x20D', '\x3', '\x2', 
		'\x2', '\x2', '\x20F', '\x212', '\x3', '\x2', '\x2', '\x2', '\x210', '\x20E', 
		'\x3', '\x2', '\x2', '\x2', '\x210', '\x211', '\x3', '\x2', '\x2', '\x2', 
		'\x211', '\x213', '\x3', '\x2', '\x2', '\x2', '\x212', '\x210', '\x3', 
		'\x2', '\x2', '\x2', '\x213', '\x214', '\a', '\x12', '\x2', '\x2', '\x214', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x215', '\x222', '\x5', 'T', '+', '\x2', 
		'\x216', '\x222', '\x5', 'V', ',', '\x2', '\x217', '\x222', '\x5', 'Z', 
		'.', '\x2', '\x218', '\x222', '\x5', 'N', '(', '\x2', '\x219', '\x222', 
		'\x5', '\\', '/', '\x2', '\x21A', '\x222', '\x5', '^', '\x30', '\x2', 
		'\x21B', '\x222', '\x5', '`', '\x31', '\x2', '\x21C', '\x222', '\x5', 
		'\x62', '\x32', '\x2', '\x21D', '\x222', '\x5', '\x64', '\x33', '\x2', 
		'\x21E', '\x222', '\x5', '\x66', '\x34', '\x2', '\x21F', '\x222', '\x5', 
		'h', '\x35', '\x2', '\x220', '\x222', '\x5', 'X', '-', '\x2', '\x221', 
		'\x215', '\x3', '\x2', '\x2', '\x2', '\x221', '\x216', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x217', '\x3', '\x2', '\x2', '\x2', '\x221', '\x218', 
		'\x3', '\x2', '\x2', '\x2', '\x221', '\x219', '\x3', '\x2', '\x2', '\x2', 
		'\x221', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x221', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x221', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x221', 
		'\x21D', '\x3', '\x2', '\x2', '\x2', '\x221', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x221', '\x21F', '\x3', '\x2', '\x2', '\x2', '\x221', '\x220', 
		'\x3', '\x2', '\x2', '\x2', '\x222', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x224', '\x5', 'r', ':', '\x2', '\x224', '\x225', '\a', '\x4', 
		'\x2', '\x2', '\x225', 'S', '\x3', '\x2', '\x2', '\x2', '\x226', '\x227', 
		'\a', '+', '\x2', '\x2', '\x227', '\x228', '\a', '\x17', '\x2', '\x2', 
		'\x228', '\x229', '\x5', 'r', ':', '\x2', '\x229', '\x22A', '\a', '\x18', 
		'\x2', '\x2', '\x22A', '\x22D', '\x5', 'P', ')', '\x2', '\x22B', '\x22C', 
		'\a', ',', '\x2', '\x2', '\x22C', '\x22E', '\x5', 'P', ')', '\x2', '\x22D', 
		'\x22B', '\x3', '\x2', '\x2', '\x2', '\x22D', '\x22E', '\x3', '\x2', '\x2', 
		'\x2', '\x22E', 'U', '\x3', '\x2', '\x2', '\x2', '\x22F', '\x230', '\a', 
		'-', '\x2', '\x2', '\x230', '\x231', '\a', '\x17', '\x2', '\x2', '\x231', 
		'\x232', '\x5', 'r', ':', '\x2', '\x232', '\x233', '\a', '\x18', '\x2', 
		'\x2', '\x233', '\x234', '\x5', 'P', ')', '\x2', '\x234', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x235', '\x238', '\x5', 'j', '\x36', '\x2', '\x236', 
		'\x238', '\x5', 'R', '*', '\x2', '\x237', '\x235', '\x3', '\x2', '\x2', 
		'\x2', '\x237', '\x236', '\x3', '\x2', '\x2', '\x2', '\x238', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x239', '\x23A', '\a', '\x1A', '\x2', '\x2', '\x23A', 
		'\x23D', '\a', '\x17', '\x2', '\x2', '\x23B', '\x23E', '\x5', 'X', '-', 
		'\x2', '\x23C', '\x23E', '\a', '\x4', '\x2', '\x2', '\x23D', '\x23B', 
		'\x3', '\x2', '\x2', '\x2', '\x23D', '\x23C', '\x3', '\x2', '\x2', '\x2', 
		'\x23E', '\x241', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x242', '\x5', 
		'R', '*', '\x2', '\x240', '\x242', '\a', '\x4', '\x2', '\x2', '\x241', 
		'\x23F', '\x3', '\x2', '\x2', '\x2', '\x241', '\x240', '\x3', '\x2', '\x2', 
		'\x2', '\x242', '\x244', '\x3', '\x2', '\x2', '\x2', '\x243', '\x245', 
		'\x5', 'r', ':', '\x2', '\x244', '\x243', '\x3', '\x2', '\x2', '\x2', 
		'\x244', '\x245', '\x3', '\x2', '\x2', '\x2', '\x245', '\x246', '\x3', 
		'\x2', '\x2', '\x2', '\x246', '\x247', '\a', '\x18', '\x2', '\x2', '\x247', 
		'\x248', '\x5', 'P', ')', '\x2', '\x248', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x249', '\x24B', '\a', '.', '\x2', '\x2', '\x24A', '\x24C', '\a', 'y', 
		'\x2', '\x2', '\x24B', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', 
		'\x3', '\x2', '\x2', '\x2', '\x24C', '\x24D', '\x3', '\x2', '\x2', '\x2', 
		'\x24D', '\x24E', '\x5', '\x80', '\x41', '\x2', '\x24E', ']', '\x3', '\x2', 
		'\x2', '\x2', '\x24F', '\x250', '\a', '/', '\x2', '\x2', '\x250', '\x251', 
		'\x5', 'P', ')', '\x2', '\x251', '\x252', '\a', '-', '\x2', '\x2', '\x252', 
		'\x253', '\a', '\x17', '\x2', '\x2', '\x253', '\x254', '\x5', 'r', ':', 
		'\x2', '\x254', '\x255', '\a', '\x18', '\x2', '\x2', '\x255', '\x256', 
		'\a', '\x4', '\x2', '\x2', '\x256', '_', '\x3', '\x2', '\x2', '\x2', '\x257', 
		'\x258', '\a', 'n', '\x2', '\x2', '\x258', '\x259', '\a', '\x4', '\x2', 
		'\x2', '\x259', '\x61', '\x3', '\x2', '\x2', '\x2', '\x25A', '\x25B', 
		'\a', 'l', '\x2', '\x2', '\x25B', '\x25C', '\a', '\x4', '\x2', '\x2', 
		'\x25C', '\x63', '\x3', '\x2', '\x2', '\x2', '\x25D', '\x25F', '\a', '\x30', 
		'\x2', '\x2', '\x25E', '\x260', '\x5', 'r', ':', '\x2', '\x25F', '\x25E', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x261', '\x3', '\x2', '\x2', '\x2', '\x261', '\x262', '\a', 
		'\x4', '\x2', '\x2', '\x262', '\x65', '\x3', '\x2', '\x2', '\x2', '\x263', 
		'\x264', '\a', '\x31', '\x2', '\x2', '\x264', '\x265', '\a', '\x4', '\x2', 
		'\x2', '\x265', 'g', '\x3', '\x2', '\x2', '\x2', '\x266', '\x267', '\a', 
		'\x32', '\x2', '\x2', '\x267', '\x268', '\x5', '~', '@', '\x2', '\x268', 
		'\x269', '\a', '\x4', '\x2', '\x2', '\x269', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26B', '\a', '\x33', '\x2', '\x2', '\x26B', '\x272', 
		'\x5', 'n', '\x38', '\x2', '\x26C', '\x272', '\x5', '@', '!', '\x2', '\x26D', 
		'\x26E', '\a', '\x17', '\x2', '\x2', '\x26E', '\x26F', '\x5', 'l', '\x37', 
		'\x2', '\x26F', '\x270', '\a', '\x18', '\x2', '\x2', '\x270', '\x272', 
		'\x3', '\x2', '\x2', '\x2', '\x271', '\x26A', '\x3', '\x2', '\x2', '\x2', 
		'\x271', '\x26C', '\x3', '\x2', '\x2', '\x2', '\x271', '\x26D', '\x3', 
		'\x2', '\x2', '\x2', '\x272', '\x275', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x274', '\a', '\v', '\x2', '\x2', '\x274', '\x276', '\x5', 'r', ':', 
		'\x2', '\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x275', '\x276', 
		'\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\x3', '\x2', '\x2', '\x2', 
		'\x277', '\x278', '\a', '\x4', '\x2', '\x2', '\x278', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x279', '\x27B', '\x5', '@', '!', '\x2', '\x27A', '\x279', 
		'\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', '\x3', '\x2', '\x2', '\x2', 
		'\x27B', '\x282', '\x3', '\x2', '\x2', '\x2', '\x27C', '\x27E', '\a', 
		'\x11', '\x2', '\x2', '\x27D', '\x27F', '\x5', '@', '!', '\x2', '\x27E', 
		'\x27D', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', 
		'\x2', '\x27F', '\x281', '\x3', '\x2', '\x2', '\x2', '\x280', '\x27C', 
		'\x3', '\x2', '\x2', '\x2', '\x281', '\x284', '\x3', '\x2', '\x2', '\x2', 
		'\x282', '\x280', '\x3', '\x2', '\x2', '\x2', '\x282', '\x283', '\x3', 
		'\x2', '\x2', '\x2', '\x283', 'm', '\x3', '\x2', '\x2', '\x2', '\x284', 
		'\x282', '\x3', '\x2', '\x2', '\x2', '\x285', '\x28C', '\a', '\x17', '\x2', 
		'\x2', '\x286', '\x288', '\x5', '\xAA', 'V', '\x2', '\x287', '\x286', 
		'\x3', '\x2', '\x2', '\x2', '\x287', '\x288', '\x3', '\x2', '\x2', '\x2', 
		'\x288', '\x289', '\x3', '\x2', '\x2', '\x2', '\x289', '\x28B', '\a', 
		'\x11', '\x2', '\x2', '\x28A', '\x287', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28E', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x28C', '\x28D', '\x3', '\x2', '\x2', '\x2', '\x28D', '\x290', 
		'\x3', '\x2', '\x2', '\x2', '\x28E', '\x28C', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x291', '\x5', '\xAA', 'V', '\x2', '\x290', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x290', '\x291', '\x3', '\x2', '\x2', '\x2', '\x291', 
		'\x292', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\a', '\x18', '\x2', 
		'\x2', '\x293', 'o', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', '\t', 
		'\b', '\x2', '\x2', '\x295', 'q', '\x3', '\x2', '\x2', '\x2', '\x296', 
		'\x297', '\b', ':', '\x1', '\x2', '\x297', '\x298', '\a', '\x39', '\x2', 
		'\x2', '\x298', '\x2A9', '\x5', '\x42', '\"', '\x2', '\x299', '\x29A', 
		'\a', '\x17', '\x2', '\x2', '\x29A', '\x29B', '\x5', 'r', ':', '\x2', 
		'\x29B', '\x29C', '\a', '\x18', '\x2', '\x2', '\x29C', '\x2A9', '\x3', 
		'\x2', '\x2', '\x2', '\x29D', '\x29E', '\t', '\t', '\x2', '\x2', '\x29E', 
		'\x2A9', '\x5', 'r', ':', '\x15', '\x29F', '\x2A0', '\t', '\n', '\x2', 
		'\x2', '\x2A0', '\x2A9', '\x5', 'r', ':', '\x14', '\x2A1', '\x2A2', '\t', 
		'\v', '\x2', '\x2', '\x2A2', '\x2A9', '\x5', 'r', ':', '\x13', '\x2A3', 
		'\x2A4', '\a', '>', '\x2', '\x2', '\x2A4', '\x2A9', '\x5', 'r', ':', '\x12', 
		'\x2A5', '\x2A6', '\a', '\x6', '\x2', '\x2', '\x2A6', '\x2A9', '\x5', 
		'r', ':', '\x11', '\x2A7', '\x2A9', '\x5', 't', ';', '\x2', '\x2A8', '\x296', 
		'\x3', '\x2', '\x2', '\x2', '\x2A8', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x2A8', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x29F', '\x3', 
		'\x2', '\x2', '\x2', '\x2A8', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A8', 
		'\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A8', '\x2A5', '\x3', '\x2', '\x2', 
		'\x2', '\x2A8', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2E5', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2AB', '\f', '\x10', '\x2', '\x2', 
		'\x2AB', '\x2AC', '\a', '?', '\x2', '\x2', '\x2AC', '\x2E4', '\x5', 'r', 
		':', '\x11', '\x2AD', '\x2AE', '\f', '\xF', '\x2', '\x2', '\x2AE', '\x2AF', 
		'\t', '\f', '\x2', '\x2', '\x2AF', '\x2E4', '\x5', 'r', ':', '\x10', '\x2B0', 
		'\x2B1', '\f', '\xE', '\x2', '\x2', '\x2B1', '\x2B2', '\t', '\n', '\x2', 
		'\x2', '\x2B2', '\x2E4', '\x5', 'r', ':', '\xF', '\x2B3', '\x2B4', '\f', 
		'\r', '\x2', '\x2', '\x2B4', '\x2B5', '\t', '\r', '\x2', '\x2', '\x2B5', 
		'\x2E4', '\x5', 'r', ':', '\xE', '\x2B6', '\x2B7', '\f', '\f', '\x2', 
		'\x2', '\x2B7', '\x2B8', '\a', '\x44', '\x2', '\x2', '\x2B8', '\x2E4', 
		'\x5', 'r', ':', '\r', '\x2B9', '\x2BA', '\f', '\v', '\x2', '\x2', '\x2BA', 
		'\x2BB', '\a', '\x5', '\x2', '\x2', '\x2BB', '\x2E4', '\x5', 'r', ':', 
		'\f', '\x2BC', '\x2BD', '\f', '\n', '\x2', '\x2', '\x2BD', '\x2BE', '\a', 
		'\x45', '\x2', '\x2', '\x2BE', '\x2E4', '\x5', 'r', ':', '\v', '\x2BF', 
		'\x2C0', '\f', '\t', '\x2', '\x2', '\x2C0', '\x2C1', '\t', '\xE', '\x2', 
		'\x2', '\x2C1', '\x2E4', '\x5', 'r', ':', '\n', '\x2C2', '\x2C3', '\f', 
		'\b', '\x2', '\x2', '\x2C3', '\x2C4', '\t', '\xF', '\x2', '\x2', '\x2C4', 
		'\x2E4', '\x5', 'r', ':', '\t', '\x2C5', '\x2C6', '\f', '\a', '\x2', '\x2', 
		'\x2C6', '\x2C7', '\a', 'H', '\x2', '\x2', '\x2C7', '\x2E4', '\x5', 'r', 
		':', '\b', '\x2C8', '\x2C9', '\f', '\x6', '\x2', '\x2', '\x2C9', '\x2CA', 
		'\a', 'I', '\x2', '\x2', '\x2CA', '\x2E4', '\x5', 'r', ':', '\a', '\x2CB', 
		'\x2CC', '\f', '\x5', '\x2', '\x2', '\x2CC', '\x2CD', '\a', 'J', '\x2', 
		'\x2', '\x2CD', '\x2CE', '\x5', 'r', ':', '\x2', '\x2CE', '\x2CF', '\a', 
		'K', '\x2', '\x2', '\x2CF', '\x2D0', '\x5', 'r', ':', '\x6', '\x2D0', 
		'\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D2', '\f', '\x4', '\x2', 
		'\x2', '\x2D2', '\x2D3', '\t', '\x10', '\x2', '\x2', '\x2D3', '\x2E4', 
		'\x5', 'r', ':', '\x5', '\x2D4', '\x2D5', '\f', '\x1B', '\x2', '\x2', 
		'\x2D5', '\x2E4', '\t', '\t', '\x2', '\x2', '\x2D6', '\x2D7', '\f', '\x19', 
		'\x2', '\x2', '\x2D7', '\x2D8', '\a', '\"', '\x2', '\x2', '\x2D8', '\x2D9', 
		'\x5', 'r', ':', '\x2', '\x2D9', '\x2DA', '\a', '#', '\x2', '\x2', '\x2DA', 
		'\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\f', '\x18', '\x2', 
		'\x2', '\x2DC', '\x2DD', '\a', '\x17', '\x2', '\x2', '\x2DD', '\x2DE', 
		'\x5', '|', '?', '\x2', '\x2DE', '\x2DF', '\a', '\x18', '\x2', '\x2', 
		'\x2DF', '\x2E4', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E1', '\f', 
		'\x17', '\x2', '\x2', '\x2E1', '\x2E2', '\a', '%', '\x2', '\x2', '\x2E2', 
		'\x2E4', '\x5', '\xAA', 'V', '\x2', '\x2E3', '\x2AA', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x2AD', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2B0', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2B3', '\x3', '\x2', '\x2', '\x2', 
		'\x2E3', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2B9', '\x3', 
		'\x2', '\x2', '\x2', '\x2E3', '\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2E3', 
		'\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2C2', '\x3', '\x2', '\x2', 
		'\x2', '\x2E3', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2CB', '\x3', '\x2', '\x2', '\x2', 
		'\x2E3', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2D4', '\x3', 
		'\x2', '\x2', '\x2', '\x2E3', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2E3', 
		'\x2DB', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E0', '\x3', '\x2', '\x2', 
		'\x2', '\x2E4', '\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', 
		'\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E6', '\x3', '\x2', '\x2', '\x2', 
		'\x2E6', 's', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E5', '\x3', '\x2', 
		'\x2', '\x2', '\x2E8', '\x2F9', '\a', '\x65', '\x2', '\x2', '\x2E9', '\x2F9', 
		'\x5', '\xA8', 'U', '\x2', '\x2EA', '\x2F9', '\a', 'i', '\x2', '\x2', 
		'\x2EB', '\x2F9', '\a', 'y', '\x2', '\x2', '\x2EC', '\x2EF', '\x5', '\xAA', 
		'V', '\x2', '\x2ED', '\x2EE', '\a', '\"', '\x2', '\x2', '\x2EE', '\x2F0', 
		'\a', '#', '\x2', '\x2', '\x2EF', '\x2ED', '\x3', '\x2', '\x2', '\x2', 
		'\x2EF', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2F9', '\x3', 
		'\x2', '\x2', '\x2', '\x2F1', '\x2F9', '\a', 'v', '\x2', '\x2', '\x2F2', 
		'\x2F9', '\x5', '\xA4', 'S', '\x2', '\x2F3', '\x2F6', '\x5', '\xA6', 'T', 
		'\x2', '\x2F4', '\x2F5', '\a', '\"', '\x2', '\x2', '\x2F5', '\x2F7', '\a', 
		'#', '\x2', '\x2', '\x2F6', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2F6', 
		'\x2F7', '\x3', '\x2', '\x2', '\x2', '\x2F7', '\x2F9', '\x3', '\x2', '\x2', 
		'\x2', '\x2F8', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2E9', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2EA', '\x3', '\x2', '\x2', '\x2', 
		'\x2F8', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2EC', '\x3', 
		'\x2', '\x2', '\x2', '\x2F8', '\x2F1', '\x3', '\x2', '\x2', '\x2', '\x2F8', 
		'\x2F2', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F3', '\x3', '\x2', '\x2', 
		'\x2', '\x2F9', 'u', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FF', '\x5', 
		'r', ':', '\x2', '\x2FB', '\x2FC', '\a', '\x11', '\x2', '\x2', '\x2FC', 
		'\x2FE', '\x5', 'r', ':', '\x2', '\x2FD', '\x2FB', '\x3', '\x2', '\x2', 
		'\x2', '\x2FE', '\x301', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x2FD', 
		'\x3', '\x2', '\x2', '\x2', '\x2FF', '\x300', '\x3', '\x2', '\x2', '\x2', 
		'\x300', 'w', '\x3', '\x2', '\x2', '\x2', '\x301', '\x2FF', '\x3', '\x2', 
		'\x2', '\x2', '\x302', '\x307', '\x5', 'z', '>', '\x2', '\x303', '\x304', 
		'\a', '\x11', '\x2', '\x2', '\x304', '\x306', '\x5', 'z', '>', '\x2', 
		'\x305', '\x303', '\x3', '\x2', '\x2', '\x2', '\x306', '\x309', '\x3', 
		'\x2', '\x2', '\x2', '\x307', '\x305', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x308', '\x3', '\x2', '\x2', '\x2', '\x308', '\x30B', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x307', '\x3', '\x2', '\x2', '\x2', '\x30A', '\x30C', 
		'\a', '\x11', '\x2', '\x2', '\x30B', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x30C', 'y', '\x3', '\x2', 
		'\x2', '\x2', '\x30D', '\x30E', '\x5', '\xAA', 'V', '\x2', '\x30E', '\x30F', 
		'\a', 'K', '\x2', '\x2', '\x30F', '\x310', '\x5', 'r', ':', '\x2', '\x310', 
		'{', '\x3', '\x2', '\x2', '\x2', '\x311', '\x313', '\a', '\x10', '\x2', 
		'\x2', '\x312', '\x314', '\x5', 'x', '=', '\x2', '\x313', '\x312', '\x3', 
		'\x2', '\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x31A', '\a', '\x12', '\x2', 
		'\x2', '\x316', '\x318', '\x5', 'v', '<', '\x2', '\x317', '\x316', '\x3', 
		'\x2', '\x2', '\x2', '\x317', '\x318', '\x3', '\x2', '\x2', '\x2', '\x318', 
		'\x31A', '\x3', '\x2', '\x2', '\x2', '\x319', '\x311', '\x3', '\x2', '\x2', 
		'\x2', '\x319', '\x317', '\x3', '\x2', '\x2', '\x2', '\x31A', '}', '\x3', 
		'\x2', '\x2', '\x2', '\x31B', '\x31C', '\x5', 'r', ':', '\x2', '\x31C', 
		'\x31D', '\a', '\x17', '\x2', '\x2', '\x31D', '\x31E', '\x5', '|', '?', 
		'\x2', '\x31E', '\x31F', '\a', '\x18', '\x2', '\x2', '\x31F', '\x7F', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x324', '\a', '\x10', '\x2', '\x2', 
		'\x321', '\x323', '\x5', '\x82', '\x42', '\x2', '\x322', '\x321', '\x3', 
		'\x2', '\x2', '\x2', '\x323', '\x326', '\x3', '\x2', '\x2', '\x2', '\x324', 
		'\x322', '\x3', '\x2', '\x2', '\x2', '\x324', '\x325', '\x3', '\x2', '\x2', 
		'\x2', '\x325', '\x327', '\x3', '\x2', '\x2', '\x2', '\x326', '\x324', 
		'\x3', '\x2', '\x2', '\x2', '\x327', '\x328', '\a', '\x12', '\x2', '\x2', 
		'\x328', '\x81', '\x3', '\x2', '\x2', '\x2', '\x329', '\x33B', '\x5', 
		'\xAA', 'V', '\x2', '\x32A', '\x33B', '\x5', '\x80', '\x41', '\x2', '\x32B', 
		'\x33B', '\x5', '\x84', '\x43', '\x2', '\x32C', '\x33B', '\x5', '\x88', 
		'\x45', '\x2', '\x32D', '\x33B', '\x5', '\x8A', '\x46', '\x2', '\x32E', 
		'\x33B', '\x5', '\x90', 'I', '\x2', '\x32F', '\x33B', '\x5', '\x92', 'J', 
		'\x2', '\x330', '\x33B', '\x5', '\x94', 'K', '\x2', '\x331', '\x33B', 
		'\x5', '\x98', 'M', '\x2', '\x332', '\x33B', '\x5', '\x9C', 'O', '\x2', 
		'\x333', '\x33B', '\x5', '\x9E', 'P', '\x2', '\x334', '\x33B', '\a', 'l', 
		'\x2', '\x2', '\x335', '\x33B', '\a', 'n', '\x2', '\x2', '\x336', '\x33B', 
		'\x5', '\xA2', 'R', '\x2', '\x337', '\x33B', '\x5', '\xA8', 'U', '\x2', 
		'\x338', '\x33B', '\a', 'y', '\x2', '\x2', '\x339', '\x33B', '\a', 'i', 
		'\x2', '\x2', '\x33A', '\x329', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x32A', 
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x32B', '\x3', '\x2', '\x2', '\x2', 
		'\x33A', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x32D', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x330', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\x331', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x332', 
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x333', '\x3', '\x2', '\x2', '\x2', 
		'\x33A', '\x334', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x335', '\x3', 
		'\x2', '\x2', '\x2', '\x33A', '\x336', '\x3', '\x2', '\x2', '\x2', '\x33A', 
		'\x337', '\x3', '\x2', '\x2', '\x2', '\x33A', '\x338', '\x3', '\x2', '\x2', 
		'\x2', '\x33A', '\x339', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x83', 
		'\x3', '\x2', '\x2', '\x2', '\x33C', '\x33F', '\x5', '\x86', '\x44', '\x2', 
		'\x33D', '\x33F', '\x5', '\xA0', 'Q', '\x2', '\x33E', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x33E', '\x33D', '\x3', '\x2', '\x2', '\x2', '\x33F', 
		'\x85', '\x3', '\x2', '\x2', '\x2', '\x340', '\x345', '\a', '\x30', '\x2', 
		'\x2', '\x341', '\x345', '\a', '$', '\x2', '\x2', '\x342', '\x345', '\a', 
		'\x36', '\x2', '\x2', '\x343', '\x345', '\x5', '\xAA', 'V', '\x2', '\x344', 
		'\x340', '\x3', '\x2', '\x2', '\x2', '\x344', '\x341', '\x3', '\x2', '\x2', 
		'\x2', '\x344', '\x342', '\x3', '\x2', '\x2', '\x2', '\x344', '\x343', 
		'\x3', '\x2', '\x2', '\x2', '\x345', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x346', '\x348', '\a', '\x17', '\x2', '\x2', '\x347', '\x349', '\x5', 
		'\x84', '\x43', '\x2', '\x348', '\x347', '\x3', '\x2', '\x2', '\x2', '\x348', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x349', '\x34E', '\x3', '\x2', '\x2', 
		'\x2', '\x34A', '\x34B', '\a', '\x11', '\x2', '\x2', '\x34B', '\x34D', 
		'\x5', '\x84', '\x43', '\x2', '\x34C', '\x34A', '\x3', '\x2', '\x2', '\x2', 
		'\x34D', '\x350', '\x3', '\x2', '\x2', '\x2', '\x34E', '\x34C', '\x3', 
		'\x2', '\x2', '\x2', '\x34E', '\x34F', '\x3', '\x2', '\x2', '\x2', '\x34F', 
		'\x351', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34E', '\x3', '\x2', '\x2', 
		'\x2', '\x351', '\x353', '\a', '\x18', '\x2', '\x2', '\x352', '\x346', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x353', '\x87', '\x3', '\x2', '\x2', '\x2', '\x354', '\x355', '\a', 'V', 
		'\x2', '\x2', '\x355', '\x358', '\x5', '\x8C', 'G', '\x2', '\x356', '\x357', 
		'\a', 'W', '\x2', '\x2', '\x357', '\x359', '\x5', '\x84', '\x43', '\x2', 
		'\x358', '\x356', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', '\x3', 
		'\x2', '\x2', '\x2', '\x359', '\x89', '\x3', '\x2', '\x2', '\x2', '\x35A', 
		'\x35B', '\x5', '\x8C', 'G', '\x2', '\x35B', '\x35C', '\a', 'W', '\x2', 
		'\x2', '\x35C', '\x35D', '\x5', '\x84', '\x43', '\x2', '\x35D', '\x8B', 
		'\x3', '\x2', '\x2', '\x2', '\x35E', '\x364', '\x5', '\xAA', 'V', '\x2', 
		'\x35F', '\x360', '\a', '\x17', '\x2', '\x2', '\x360', '\x361', '\x5', 
		'\x8E', 'H', '\x2', '\x361', '\x362', '\a', '\x18', '\x2', '\x2', '\x362', 
		'\x364', '\x3', '\x2', '\x2', '\x2', '\x363', '\x35E', '\x3', '\x2', '\x2', 
		'\x2', '\x363', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x364', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x365', '\x36A', '\x5', '\xAA', 'V', '\x2', 
		'\x366', '\x367', '\a', '\x11', '\x2', '\x2', '\x367', '\x369', '\x5', 
		'\xAA', 'V', '\x2', '\x368', '\x366', '\x3', '\x2', '\x2', '\x2', '\x369', 
		'\x36C', '\x3', '\x2', '\x2', '\x2', '\x36A', '\x368', '\x3', '\x2', '\x2', 
		'\x2', '\x36A', '\x36B', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x8F', 
		'\x3', '\x2', '\x2', '\x2', '\x36C', '\x36A', '\x3', '\x2', '\x2', '\x2', 
		'\x36D', '\x36E', '\a', 'X', '\x2', '\x2', '\x36E', '\x36F', '\x5', '\xAA', 
		'V', '\x2', '\x36F', '\x91', '\x3', '\x2', '\x2', '\x2', '\x370', '\x371', 
		'\x5', '\xAA', 'V', '\x2', '\x371', '\x372', '\a', 'K', '\x2', '\x2', 
		'\x372', '\x93', '\x3', '\x2', '\x2', '\x2', '\x373', '\x374', '\a', 'Y', 
		'\x2', '\x2', '\x374', '\x378', '\x5', '\x84', '\x43', '\x2', '\x375', 
		'\x377', '\x5', '\x96', 'L', '\x2', '\x376', '\x375', '\x3', '\x2', '\x2', 
		'\x2', '\x377', '\x37A', '\x3', '\x2', '\x2', '\x2', '\x378', '\x376', 
		'\x3', '\x2', '\x2', '\x2', '\x378', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'\x379', '\x95', '\x3', '\x2', '\x2', '\x2', '\x37A', '\x378', '\x3', 
		'\x2', '\x2', '\x2', '\x37B', '\x37C', '\a', 'Z', '\x2', '\x2', '\x37C', 
		'\x37D', '\x5', '\xA0', 'Q', '\x2', '\x37D', '\x37E', '\x5', '\x80', '\x41', 
		'\x2', '\x37E', '\x382', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x380', 
		'\a', '[', '\x2', '\x2', '\x380', '\x382', '\x5', '\x80', '\x41', '\x2', 
		'\x381', '\x37B', '\x3', '\x2', '\x2', '\x2', '\x381', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x382', '\x97', '\x3', '\x2', '\x2', '\x2', '\x383', 
		'\x384', '\a', '\x1E', '\x2', '\x2', '\x384', '\x385', '\x5', '\xAA', 
		'V', '\x2', '\x385', '\x387', '\a', '\x17', '\x2', '\x2', '\x386', '\x388', 
		'\x5', '\x8E', 'H', '\x2', '\x387', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x387', '\x388', '\x3', '\x2', '\x2', '\x2', '\x388', '\x389', '\x3', 
		'\x2', '\x2', '\x2', '\x389', '\x38B', '\a', '\x18', '\x2', '\x2', '\x38A', 
		'\x38C', '\x5', '\x9A', 'N', '\x2', '\x38B', '\x38A', '\x3', '\x2', '\x2', 
		'\x2', '\x38B', '\x38C', '\x3', '\x2', '\x2', '\x2', '\x38C', '\x38D', 
		'\x3', '\x2', '\x2', '\x2', '\x38D', '\x38E', '\x5', '\x80', '\x41', '\x2', 
		'\x38E', '\x99', '\x3', '\x2', '\x2', '\x2', '\x38F', '\x390', '\a', '\\', 
		'\x2', '\x2', '\x390', '\x391', '\x5', '\x8E', 'H', '\x2', '\x391', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x392', '\x395', '\a', '\x1A', '\x2', '\x2', 
		'\x393', '\x396', '\x5', '\x80', '\x41', '\x2', '\x394', '\x396', '\x5', 
		'\x84', '\x43', '\x2', '\x395', '\x393', '\x3', '\x2', '\x2', '\x2', '\x395', 
		'\x394', '\x3', '\x2', '\x2', '\x2', '\x396', '\x397', '\x3', '\x2', '\x2', 
		'\x2', '\x397', '\x39A', '\x5', '\x84', '\x43', '\x2', '\x398', '\x39B', 
		'\x5', '\x80', '\x41', '\x2', '\x399', '\x39B', '\x5', '\x84', '\x43', 
		'\x2', '\x39A', '\x398', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x399', 
		'\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', '\x3', '\x2', '\x2', '\x2', 
		'\x39C', '\x39D', '\x5', '\x80', '\x41', '\x2', '\x39D', '\x9D', '\x3', 
		'\x2', '\x2', '\x2', '\x39E', '\x39F', '\a', '+', '\x2', '\x2', '\x39F', 
		'\x3A0', '\x5', '\x84', '\x43', '\x2', '\x3A0', '\x3A1', '\x5', '\x80', 
		'\x41', '\x2', '\x3A1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x3A2', '\x3A3', 
		'\t', '\x11', '\x2', '\x2', '\x3A3', '\xA1', '\x3', '\x2', '\x2', '\x2', 
		'\x3A4', '\x3A5', '\a', '.', '\x2', '\x2', '\x3A5', '\x3A6', '\x5', '\xAA', 
		'V', '\x2', '\x3A6', '\x3A7', '\x5', '\x80', '\x41', '\x2', '\x3A7', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3AA', '\a', '\x17', '\x2', '\x2', 
		'\x3A9', '\x3AB', '\x5', 'r', ':', '\x2', '\x3AA', '\x3A9', '\x3', '\x2', 
		'\x2', '\x2', '\x3AA', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3B2', 
		'\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AE', '\a', '\x11', '\x2', '\x2', 
		'\x3AD', '\x3AF', '\x5', 'r', ':', '\x2', '\x3AE', '\x3AD', '\x3', '\x2', 
		'\x2', '\x2', '\x3AE', '\x3AF', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B1', 
		'\x3', '\x2', '\x2', '\x2', '\x3B0', '\x3AC', '\x3', '\x2', '\x2', '\x2', 
		'\x3B1', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B2', '\x3B0', '\x3', 
		'\x2', '\x2', '\x2', '\x3B2', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B3', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B2', '\x3', '\x2', '\x2', 
		'\x2', '\x3B5', '\x3C3', '\a', '\x18', '\x2', '\x2', '\x3B6', '\x3BF', 
		'\a', '\"', '\x2', '\x2', '\x3B7', '\x3BC', '\x5', 'r', ':', '\x2', '\x3B8', 
		'\x3B9', '\a', '\x11', '\x2', '\x2', '\x3B9', '\x3BB', '\x5', 'r', ':', 
		'\x2', '\x3BA', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3BE', 
		'\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BA', '\x3', '\x2', '\x2', '\x2', 
		'\x3BC', '\x3BD', '\x3', '\x2', '\x2', '\x2', '\x3BD', '\x3C0', '\x3', 
		'\x2', '\x2', '\x2', '\x3BE', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\x3', '\x2', '\x2', 
		'\x2', '\x3C0', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C3', 
		'\a', '#', '\x2', '\x2', '\x3C2', '\x3A8', '\x3', '\x2', '\x2', '\x2', 
		'\x3C2', '\x3B6', '\x3', '\x2', '\x2', '\x2', '\x3C3', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\x3C4', '\x3C5', '\x5', 'p', '\x39', '\x2', '\x3C5', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\x3C6', '\x3C8', '\t', '\x12', '\x2', 
		'\x2', '\x3C7', '\x3C9', '\a', 'h', '\x2', '\x2', '\x3C8', '\x3C7', '\x3', 
		'\x2', '\x2', '\x2', '\x3C8', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\xA9', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CB', '\t', '\x13', '\x2', 
		'\x2', '\x3CB', '\xAB', '\x3', '\x2', '\x2', '\x2', 'm', '\xAF', '\xB1', 
		'\xBF', '\xC3', '\xC8', '\xCF', '\xD5', '\xDB', '\xDF', '\xEB', '\xF3', 
		'\xF8', '\x102', '\x105', '\x10B', '\x113', '\x116', '\x120', '\x126', 
		'\x12C', '\x135', '\x143', '\x146', '\x152', '\x159', '\x15C', '\x15F', 
		'\x163', '\x168', '\x16C', '\x177', '\x179', '\x17D', '\x183', '\x18D', 
		'\x193', '\x19E', '\x1A1', '\x1A7', '\x1AA', '\x1B2', '\x1B5', '\x1BB', 
		'\x1BE', '\x1C6', '\x1C9', '\x1CF', '\x1D3', '\x1DE', '\x1E3', '\x1E8', 
		'\x1F0', '\x1FF', '\x201', '\x206', '\x210', '\x221', '\x22D', '\x237', 
		'\x23D', '\x241', '\x244', '\x24B', '\x25F', '\x271', '\x275', '\x27A', 
		'\x27E', '\x282', '\x287', '\x28C', '\x290', '\x2A8', '\x2E3', '\x2E5', 
		'\x2EF', '\x2F6', '\x2F8', '\x2FF', '\x307', '\x30B', '\x313', '\x317', 
		'\x319', '\x324', '\x33A', '\x33E', '\x344', '\x348', '\x34E', '\x352', 
		'\x358', '\x363', '\x36A', '\x378', '\x381', '\x387', '\x38B', '\x395', 
		'\x39A', '\x3AA', '\x3AE', '\x3B2', '\x3BC', '\x3BF', '\x3C2', '\x3C8',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
